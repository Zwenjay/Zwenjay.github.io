<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[221 Maximal Square]]></title>
      <url>/2017/09/13/221-Maximal-Square/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/maximal-square/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.<br>For example, given the following matrix:</p>
<pre>1 0 1 0 0
1 0 <font color="red">1</font> <font color="red">1</font> 1
1 1 <font color="red">1</font> <font color="red">1</font> 1
1 0 0 1 0
</pre>

</blockquote>
<p>Return 4.</p>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rows = matrix.length, maxSize = <span class="number">0</span>, temp;</div><div class="line">        <span class="keyword">if</span> (rows == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[] lastRow = <span class="keyword">new</span> <span class="keyword">int</span>[cols];</div><div class="line">        <span class="keyword">int</span> lastSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cols; i++) &#123;    </div><div class="line">            lastRow[i] = matrix[<span class="number">0</span>][i] == <span class="string">'1'</span>? <span class="number">1</span>:<span class="number">0</span>;</div><div class="line">            maxSize = Math.max(lastRow[i], maxSize);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; </div><div class="line">                   lastSize =  ( matrix[i][j] == <span class="string">'1'</span> ) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">                   maxSize = Math.max(lastSize, maxSize);</div><div class="line">                &#125; <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span> (matrix[i][j] == <span class="string">'0'</span>) &#123;</div><div class="line">                       lastRow[j-<span class="number">1</span>] = lastSize;</div><div class="line">                       lastSize = <span class="number">0</span>;</div><div class="line">                       <span class="keyword">continue</span>; </div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        temp = lastSize;</div><div class="line">                        lastSize = Math.min(Math.min(lastSize, lastRow[j]), lastRow[j - <span class="number">1</span>]) + <span class="number">1</span>;</div><div class="line">                        maxSize = Math.max(lastSize, maxSize); </div><div class="line">                        lastRow[j - <span class="number">1</span>] = temp;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                lastRow[cols - <span class="number">1</span>] = lastSize;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> maxSize * maxSize;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(COL * ROW)</p>
<p><strong>Space:</strong> O(COL or ROW)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Space Saving </tag>
            
            <tag> Palindrome Pairs </tag>
            
            <tag> Apple </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[389 Find the Difference]]></title>
      <url>/2017/09/12/389-Find-the-Difference/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/find-the-difference/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two strings s and t which consist of only lowercase letters.</p>
</blockquote>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<blockquote>
<pre>Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
</pre>


</blockquote>
<h2 id="Solution-1-Bit-Manipulate"><a href="#Solution-1-Bit-Manipulate" class="headerlink" title="Solution 1 Bit Manipulate"></a>Solution 1 Bit Manipulate</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> c = t.charAt(t.length()-<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">            c ^= t.charAt(i);</div><div class="line">            c ^= s.charAt(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(1)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Bit Manipulate </tag>
            
            <tag> Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[93 Restore IP Addresses]]></title>
      <url>/2017/09/12/93-Resort-IP-Addresses/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/restore-ip-addresses/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>
<p>For example:<br>Given “25525511135”,</p>
<p>return [“255.255.11.135”, “255.255.111.35”]. (Order does not matter)</p>
</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>Scan characters one by one, use judgement at the beginning of the backtracking function.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">12</span> || s.length() &lt; <span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        backtracking(res, s,  <span class="number">0</span>, <span class="string">""</span>, <span class="number">4</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;String&gt; res, String s, <span class="keyword">int</span> pos, String temp, <span class="keyword">int</span> parts)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.length() - pos &gt; parts * <span class="number">3</span> || s.length() - pos &lt; parts)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (parts == <span class="number">0</span>)&#123;</div><div class="line">            res.add(<span class="keyword">new</span> String(temp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>, digit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">char</span> ch = s.charAt(i);</div><div class="line">            num = <span class="number">10</span> * num + ch - <span class="string">'0'</span>;</div><div class="line">            digit++;</div><div class="line">            temp += ch;</div><div class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span> || (digit &gt; <span class="number">1</span> &amp;&amp; num &lt; <span class="number">10</span>))&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (parts &gt; <span class="number">1</span>)&#123;</div><div class="line">                backtracking(res, s, i + <span class="number">1</span>, temp + <span class="string">'.'</span>, parts - <span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                backtracking(res, s, i + <span class="number">1</span>, temp, parts - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(1)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[207 Course Schedule]]></title>
      <url>/2017/09/11/207-Course-Schedule/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/course-schedule/description" target="_blank" rel="external">Question</a></h1><blockquote>
<p>There are a total of n courses you have to take, labeled from 0 to n - 1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>
<p>For example:</p>
<pre>2, [[1,0]]</pre>


<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>
<pre>2, [[1,0],[0,1]]</pre>

<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>
</blockquote>
<h2 id="Solutino-1-BFS"><a href="#Solutino-1-BFS" class="headerlink" title="Solutino  1 BFS"></a>Solutino  1 BFS</h2><p>Every Node just do at most one BFS. </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</div><div class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(); <span class="comment">//For BFS</span></div><div class="line">        </div><div class="line">        <span class="comment">// For store former node and judge if a loop is formed.</span></div><div class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(); </div><div class="line">        </div><div class="line">        <span class="comment">//Avoid repeating visiting same nodes</span></div><div class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses]; </div><div class="line">        </div><div class="line">        <span class="comment">//Construct the graph</span></div><div class="line">        <span class="keyword">int</span>[][] graph = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses][numCourses];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++)&#123;</div><div class="line">            graph[prerequisites[i][<span class="number">0</span>]][prerequisites[i][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> cur;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(visited[i])&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//In case that later node are stored first.</span></div><div class="line">            set.clear();</div><div class="line">            </div><div class="line">            queue.offer(i);</div><div class="line">            <span class="keyword">while</span>(queue.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">                cur = queue.poll();</div><div class="line">                <span class="keyword">if</span>(visited[cur])&#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                visited[cur] = <span class="keyword">true</span>;</div><div class="line">                set.add(cur);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numCourses; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(graph[cur][j] == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(set.contains(j))&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                    queue.add(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(Node^2)</p>
<p><strong>Space:</strong> O(Node^2)</p>
<h2 id="Solutino-2-Topological-Sort"><a href="#Solutino-2-Topological-Sort" class="headerlink" title="Solutino 2 Topological Sort"></a>Solutino 2 Topological Sort</h2><p>Use Indgree</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</div><div class="line">        </div><div class="line">        List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</div><div class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> cur, count=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</div><div class="line">            graph.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        &#125;        </div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++)&#123;</div><div class="line">            graph.get(prerequisites[i][<span class="number">1</span>]).add(prerequisites[i][<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; graph.get(i).size(); j++)&#123;</div><div class="line">                inDegree[graph.get(i).get(j)]++;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>)&#123;</div><div class="line">                queue.offer(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(queue.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">            cur = queue.poll();</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.get(cur).size(); i++)&#123;</div><div class="line">                <span class="keyword">if</span>(--inDegree[graph.get(cur).get(i)] == <span class="number">0</span>)&#123;</div><div class="line">                    queue.offer(graph.get(cur).get(i));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count == numCourses;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(Node + Edge)</p>
<p><strong>Space:</strong> O(Node + Edge)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> Graph </tag>
            
            <tag> Apple </tag>
            
            <tag> Topological Sort </tag>
            
            <tag> Zenifits </tag>
            
            <tag> Yelp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[441 Arrange Coins]]></title>
      <url>/2017/09/09/441-Arrange-Coins/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/arranging-coins/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.</p>
<p>Given n, find the total number of full staircase rows that can be formed.</p>
<p>n is a non-negative integer and fits within the range of a 32-bit signed integer.</p>
<p><strong>Example 1:</strong></p>
<pre>n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.
</pre>

<p><strong>Example 2:</strong></p>
<pre>n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

Because the 4th row is incomplete, we return 3.
</pre>

</blockquote>
<h2 id="Solution-1-Binary-Search"><a href="#Solution-1-Binary-Search" class="headerlink" title="Solution 1 Binary Search"></a>Solution 1 Binary Search</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> head = <span class="number">1</span>, tail = n, mid;</div><div class="line">        <span class="keyword">while</span>(head + <span class="number">1</span> &lt; tail)&#123;</div><div class="line">            mid = head + (tail - head)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(n &gt;= (<span class="keyword">long</span>)(mid+<span class="number">1</span>)*mid/<span class="number">2</span> &amp;&amp; n &lt; (<span class="keyword">long</span>)(mid+<span class="number">2</span>)*(mid+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">if</span>(n &gt;= (<span class="keyword">long</span>)(mid+<span class="number">2</span>)*(mid+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                head = mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                tail = mid-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>)tail*(tail+<span class="number">1</span>)/<span class="number">2</span>&lt;=n?tail:head;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(lgN)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[172 Factor Trailing Zeros]]></title>
      <url>/2017/09/09/172-Factor-Trailing-Zeros/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/factorial-trailing-zeroes/description/" target="_blank" rel="external">Question</a></h1><h2 id="Solution-1-Math"><a href="#Solution-1-Math" class="headerlink" title="Solution 1 Math"></a>Solution 1 Math</h2><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> n == <span class="number">0</span>? <span class="number">0</span>:trailingZeroes(n/<span class="number">5</span>) + n/<span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(lgN)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Bloomberg </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[669 Trim a Binary Search Tree]]></title>
      <url>/2017/09/09/669-Trim-a-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/trim-a-binary-search-tree/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] (R &gt;= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.</p>
<p><strong>Example 1:</strong></p>
<pre><b>Input:</b> 
    1
   / \
  0   2


L = 1

R = 2

<b>Output:</b> 
    1
      \
       2
</pre>

<p><strong>Example 2:</strong></p>
<pre><b>Input:</b> 
    3
   / \
  0   4
   \
    2
   /
  1

L = 1

R = 3

<b>Output:</b> 
      3
     / 
   2   
  /
 1
</pre>

</blockquote>
<h2 id="Solution-1-Recursive-solution"><a href="#Solution-1-Recursive-solution" class="headerlink" title="Solution 1 Recursive solution"></a>Solution 1 Recursive solution</h2><p>If the val is in the scope, than continue with left and right, other wise, find a nearest val that in this scope.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">trimBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(root.val &gt;= L &amp;&amp; root.val &lt;=R)&#123;</div><div class="line">            root.left = trimBST(root.left, L, R);</div><div class="line">            root.right = trimBST(root.right, L, R);</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(root.val &gt; R)&#123;</div><div class="line">            TreeNode temp = root.left;</div><div class="line">            <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.val &gt; R)</div><div class="line">                temp = temp.left;</div><div class="line">            <span class="keyword">return</span> trimBST(temp, L, R);</div><div class="line">        &#125;</div><div class="line">        TreeNode temp = root.right;</div><div class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.val &lt; L)</div><div class="line">            temp = temp.right;</div><div class="line">        <span class="keyword">return</span> trimBST(temp, L, R);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(N)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[309 Best time to Buy and Sell Stock with Cooldown]]></title>
      <url>/2017/09/08/309-Best-time-to-Buy-and-Sell-Stock-with-Coolddown/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>
<ul>
<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>
<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>
</ul>
<p><strong>Example:</strong></p>
<pre>prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]
</pre>


</blockquote>
<h2 id="Solution-1-Dynamic-Programming-with-3-days"><a href="#Solution-1-Dynamic-Programming-with-3-days" class="headerlink" title="Solution 1 Dynamic Programming with 3 days"></a>Solution 1 Dynamic Programming with 3 days</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(prices.length &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> day3 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> day2 = Math.max(prices[<span class="number">1</span>] - prices[<span class="number">0</span>], <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(prices.length == <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> day2;</div><div class="line">        <span class="keyword">int</span> day1;</div><div class="line">        <span class="keyword">if</span>(day2 == <span class="number">0</span>)</div><div class="line">            day1 = Math.max(prices[<span class="number">2</span>] - prices[<span class="number">1</span>], <span class="number">0</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            day1 = Math.max(day2, day2 + prices[<span class="number">2</span>]-prices[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">int</span> temp=day1;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(prices[i] &lt;= prices[i-<span class="number">1</span>])</div><div class="line">                temp = day1;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(day1 != day2)</div><div class="line">                    temp = day1 + prices[i] - prices[i-<span class="number">1</span>];</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(day2 == day3)</div><div class="line">                        temp = day1 + prices[i] - prices[i-<span class="number">1</span>];</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">if</span>(prices[i] &gt; prices[i-<span class="number">2</span>])</div><div class="line">                            temp = Math.max(day2 + prices[i] - prices[i-<span class="number">2</span>], day3 + prices[i] - prices[i-<span class="number">1</span>]);</div><div class="line">                        <span class="keyword">else</span>&#123;</div><div class="line">                            <span class="keyword">if</span>(prices[i] - prices[i-<span class="number">1</span>] &gt; day2 - day3)</div><div class="line">                                temp = day3 + prices[i] - prices[i-<span class="number">1</span>];</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                temp = day1;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            day3 = day2;</div><div class="line">            day2 = day1;</div><div class="line">            day1 = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
<p><br> <br> <br></p>
<h2 id="Solution-2-Dynamic-Programming-with-2-days"><a href="#Solution-2-Dynamic-Programming-with-2-days" class="headerlink" title="Solution 2 Dynamic Programming with 2 days"></a>Solution 2 Dynamic Programming with 2 days</h2><p>Suppose buy cost money could be negative, then:</p>
<ol>
<li><p>If Sell at today, the max profit is max profit buy yesterday + today’s price, or just sell yesterday</p>
</li>
<li><p>If buy today, then the max profit is the sell day before yesterday and buy today or just buy yesterday</p>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(prices.length &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> buy0 = - prices[<span class="number">0</span>], sell0 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> buy1 = Math.max(buy0, -prices[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">int</span> sell1 = Math.max(sell0, prices[<span class="number">1</span>] + buy0);</div><div class="line">        <span class="keyword">int</span> tempB = buy1, tempS = sell1;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            tempB = Math.max(buy1, sell0 - prices[i]);</div><div class="line">            tempS = Math.max(sell1, buy1 + prices[i]);</div><div class="line">            buy0 = buy1;</div><div class="line">            sell0 = sell1;</div><div class="line">            buy1 = tempB;</div><div class="line">            sell1 = tempS;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tempS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[122 Best Time to Buy and Sell Stock II]]></title>
      <url>/2017/09/08/122-Best-Time-to-Buy-and-Sell-Stock-II/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
</blockquote>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><p>Find the relationship between this day and the day before.</p>
<ol>
<li><p>Initialize: f(0) = 0, obviously.</p>
</li>
<li><p>Yesterday must be sold or did nothing:</p>
<ol>
<li><p>If yesterday sold, that means there is a lower price before yesterday</p>
<ol>
<li><p>If today’s price is higher than yesterday’s, then, it should be sold today rather than yesterday, f(i) = f(i-1) + p[i] - p[i-1]</p>
</li>
<li><p>If today’s price is lower than yesterday’a, then, today makes no profit, so f(i) = f(i-1)</p>
</li>
</ol>
</li>
<li><p>If yesterday did nothing, that means it is lower than the previous sold price, </p>
<ol>
<li><p>If today’s price is higher than yesterday’s, then we can make profit by the difference, f(i) = f(i-1) + p(i) - p(i-1)</p>
</li>
<li><p>If today’s price is even lower than yesterday’s, then, we keep doing nothing, so f(i) = f(i-1)</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>As above, we could make f(i) = max(f(i-1), f(i-1) + p(i) - p(i-1))</p>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(prices.length &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> former = <span class="number">0</span>, later = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            later = Math.max(former, former + prices[i]-prices[i-<span class="number">1</span>]);</div><div class="line">            former = later;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> later;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Greedy </tag>
            
            <tag> Bloomberg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[121 Best Time to Buy and Sell Stock]]></title>
      <url>/2017/09/08/121-Best-Time-to-Buy-and-Sell-Stock-1/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example1:</strong></p>
<pre>Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
</pre>

<p><strong>Example2:</strong></p>
<p><pre>Input: [7, 6, 4, 3, 1]<br>Output: 0</pre></p>
</blockquote>
<p>In this case, no transaction is done, i.e. max profit = 0.<br></p>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><p>Just record the smallest and keep finding the largest difference</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>, profit = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            lo = prices[i] &gt; prices[lo]?lo:i;</div><div class="line">            profit = Math.max(prices[i] - prices[lo], profit);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> profit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
<p><br><br><br></p>
<h2 id="Solution-2-Kadane’s-Algorithm"><a href="#Solution-2-Kadane’s-Algorithm" class="headerlink" title="Solution 2 Kadane’s Algorithm"></a>Solution 2 Kadane’s Algorithm</h2><p>More easy to deal with continous array problems</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> curMax = <span class="number">0</span>, sofarMax = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            curMax = Math.max(<span class="number">0</span>, curMax + prices[i] - prices[i-<span class="number">1</span>]);</div><div class="line">            sofarMax = Math.max(sofarMax, curMax);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sofarMax;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Bloomberg </tag>
            
            <tag> Amazon </tag>
            
            <tag> Micorsoft </tag>
            
            <tag> Uber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[376 Wiggle Subsequence]]></title>
      <url>/2017/09/07/376-Wiggle-Subsequence/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/wiggle-subsequence/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>
<p>For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>
<p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>
<p><strong>Examples:</strong></p>
<pre><b>Input:</b> [1,7,4,9,2,5]
<b>Output:</b> 6
The entire sequence is a wiggle sequence.

<b>Input:</b> [1,17,5,10,13,15,10,5,16,8]
<b>Output:</b> 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

<b>Input:</b> [1,2,3,4,5,6,7,8,9]
<b>Output:</b> 2
</pre>

</blockquote>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lens = nums.length;</div><div class="line">        <span class="keyword">boolean</span> up;</div><div class="line">        <span class="keyword">if</span>(lens &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> lens;</div><div class="line">        <span class="comment">// int[] record = new int[lens];</span></div><div class="line">        </div><div class="line">        <span class="keyword">int</span> record1, record2;</div><div class="line">        record1 = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; nums.length &amp;&amp; nums[j] == nums[<span class="number">0</span>])&#123;</div><div class="line">            record2 = <span class="number">1</span>;</div><div class="line">            record1 = <span class="number">1</span>;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j &gt;= nums.length)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        </div><div class="line">        record2 = <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(nums[j] &gt; nums[<span class="number">0</span>])</div><div class="line">            up = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            up = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = j + <span class="number">1</span>; i &lt; lens; i++)&#123;</div><div class="line">            <span class="keyword">if</span>((!up &amp;&amp; nums[i-<span class="number">1</span>] &lt; nums[i]) || (up &amp;&amp; nums[i-<span class="number">1</span>] &gt; nums[i]))&#123;</div><div class="line">                record1 = record2;</div><div class="line">                record2 = record2+<span class="number">1</span>;</div><div class="line">                up = !up;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> record2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[322 Coin Change]]></title>
      <url>/2017/09/07/322-Coin-Change/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/coin-change/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>
<p><strong>Example 1:</strong></p>
<p>coins = [1, 2, 5], amount = 11<br>return 3 (11 = 5 + 5 + 1)</p>
<p><strong>Example 2:</strong></p>
<p>coins = [2], amount = 3<br>return -1.</p>
<p><strong>Note:</strong><br>You may assume that you have an infinite number of each kind of coin.</p>
</blockquote>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> rec(count, coins, amount);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span>[] count, <span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(amount &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(amount == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(count[amount] != <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> count[amount];</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mins = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coins.length; i++)&#123;</div><div class="line">            <span class="keyword">int</span> res = rec(count, coins, amount - coins[i]);</div><div class="line">            <span class="keyword">if</span>(res &gt;= <span class="number">0</span>)&#123;</div><div class="line">                mins = Math.min(mins, res + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mins == Integer.MAX_VALUE)&#123;</div><div class="line">            count[amount] = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        count[amount] = mins;</div><div class="line">        <span class="keyword">return</span> mins;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(Nset^amount)</p>
<p><strong>Space:</strong> O(amount)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[90 Subsets II]]></title>
      <url>/2017/09/06/90-Subsets-II/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/subsets-ii/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a collection of integers that might contain duplicates, nums, return all possible subsets.</p>
<p>Note: The solution set must not contain duplicate subsets.</p>
<p>For example,<br>If <strong><em>nums</em></strong> = [1,2,2], a solution is:</p>
<pre>[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
</pre>

</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>One specific thing, we should avoid duplicity by sorting and ignore continous same numbers.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        backtracking(res, nums, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> pos, List&lt;Integer&gt; temp)</span></span>&#123;</div><div class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(temp));</div><div class="line">        <span class="keyword">int</span> i = pos;</div><div class="line">        <span class="keyword">while</span>(i &lt; nums.length)&#123;</div><div class="line">            temp.add(nums[i]);</div><div class="line">            backtracking(res, nums, i+<span class="number">1</span>, temp);</div><div class="line">            temp.remove(temp.size()-<span class="number">1</span>);</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span>(i &lt; nums.length &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])</div><div class="line">                i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(2^N)</p>
<p><strong>Space:</strong> O(N)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[13 Roman to Integer]]></title>
      <url>/2017/09/06/13-Roman-to-Integer/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
</blockquote>
<h2 id="Solution-1-Straightforward-Solution"><a href="#Solution-1-Straightforward-Solution" class="headerlink" title="Solution 1 Straightforward Solution"></a>Solution 1 Straightforward Solution</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'M'</span>)</div><div class="line">                sum += <span class="number">1000</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'D'</span>)</div><div class="line">                sum += <span class="number">500</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'C'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(i &lt; s.length()-<span class="number">1</span> &amp;&amp; (s.charAt(i+<span class="number">1</span>) == <span class="string">'D'</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">'M'</span>))</div><div class="line">                    sum -= <span class="number">100</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    sum +=<span class="number">100</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'L'</span>)</div><div class="line">                sum += <span class="number">50</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'X'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(i &lt; s.length()-<span class="number">1</span> &amp;&amp; (s.charAt(i+<span class="number">1</span>) == <span class="string">'C'</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">'L'</span>))</div><div class="line">                    sum -= <span class="number">10</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    sum += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'V'</span>)</div><div class="line">                sum += <span class="number">5</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(i &lt; s.length()-<span class="number">1</span> &amp;&amp; (s.charAt(i+<span class="number">1</span>) == <span class="string">'X'</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">'V'</span>))</div><div class="line">                    sum-=<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    sum+=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Bloomberg </tag>
            
            <tag> Uber </tag>
            
            <tag> String </tag>
            
            <tag> Math </tag>
            
            <tag> Microsoft </tag>
            
            <tag> Yahoo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[215 Kth Largest Element in an Array]]></title>
      <url>/2017/09/06/215-Kth-Largest-Element-in-an-Array/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>For example,<br>Given [3,2,1,5,6,4] and k = 2, return 5.</p>
</blockquote>
<h2 id="Solution-1-Half-Quick-Sort"><a href="#Solution-1-Half-Quick-Sort" class="headerlink" title="Solution 1 Half Quick Sort"></a>Solution 1 Half Quick Sort</h2><p>Just quick sort method, but every time only do the half that contains the kth largest one.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        quickFind(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>, nums.length - k);</div><div class="line">        <span class="keyword">return</span> nums[nums.length - k];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickFind</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> head, <span class="keyword">int</span> tail, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(head &gt;= tail)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> pivot = tail;</div><div class="line">        <span class="keyword">int</span> i = head, j = tail-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line">            <span class="keyword">while</span>(nums[i] &lt;= nums[pivot] &amp;&amp; i &lt; j)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">while</span>(nums[j] &gt;= nums[pivot] &amp;&amp; i &lt; j)</div><div class="line">                j--;</div><div class="line">            swap(nums, i, j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[j] &gt;= nums[pivot])&#123;</div><div class="line">            swap(nums, j, pivot);</div><div class="line">            pivot = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(pivot == k)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(pivot &gt; k)</div><div class="line">            quickFind(nums, head, pivot-<span class="number">1</span>, k);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            quickFind(nums, pivot+<span class="number">1</span>, tail, k);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(logN)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Bloomberg </tag>
            
            <tag> Amazon </tag>
            
            <tag> Micorsoft </tag>
            
            <tag> Apple </tag>
            
            <tag> Heap </tag>
            
            <tag> Divide and Conquer </tag>
            
            <tag> PocketGems </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[377 Combination Sum IV]]></title>
      <url>/2017/09/05/377-Combination-Sum-IV/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/combination-sum-iv/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>
<p><strong>Example:</strong></p>
<pre><i><b>nums</b></i> = [1, 2, 3]
<i><b>target</b></i> = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is <i><b>7</b></i>.
</pre>


</blockquote>
<h2 id="Solution-1-Recursive-Dynamic-Programming"><a href="#Solution-1-Recursive-Dynamic-Programming" class="headerlink" title="Solution 1 Recursive Dynamic Programming"></a>Solution 1 Recursive Dynamic Programming</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        <span class="keyword">return</span> backtracking(nums, target, map);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, HashMap&lt;Integer, Integer&gt; map)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(target))</div><div class="line">            <span class="keyword">return</span> map.get(target);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)&#123;</div><div class="line">            sum += backtracking(nums, target-x, map);</div><div class="line">        &#125;</div><div class="line">        map.put(target, sum);</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Google </tag>
            
            <tag> Game of Life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[209 Minimum Size Subarray Sum]]></title>
      <url>/2017/09/05/209-Minimum-Size-Subarray-Sum/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/minimum-size-subarray-sum/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p>
<p>For example, given the array [2,3,1,2,4,3] and s = 7,<br>the subarray [4,3] has the minimal length under the problem constraint.</p>
</blockquote>
<h2 id="Solution-1-Two-Pointers"><a href="#Solution-1-Two-Pointers" class="headerlink" title="Solution 1 Two Pointers"></a>Solution 1 Two Pointers</h2><p>Use two pointers to compete it with O(N) time.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> minL = nums.length+<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; nums.length)&#123;</div><div class="line">            sum += nums[j];</div><div class="line">            <span class="keyword">while</span>(sum &gt;= s)&#123;</div><div class="line">                minL = Math.min(minL, j-i+<span class="number">1</span>);</div><div class="line">                sum -= nums[i];</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(minL == nums.length+<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> minL;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
<h2 id="Solution-2-Binary-Search"><a href="#Solution-2-Binary-Search" class="headerlink" title="Solution 2 Binary Search"></a>Solution 2 Binary Search</h2><p>As the <em>more exercise</em> asked, it is a NlogN mthod</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>{
        <span class="keyword">int</span> j, minL = nums.length+<span class="number">1</span>;
        <span class="keyword">int</span>[] sumArray = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];
        sumArray[<span class="number">0</span>] = <span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sumArray.length; i++)
            sumArray[i] = sumArray[i-<span class="number">1</span>] + nums[i-<span class="number">1</span>];
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sumArray.length; i++){
            <span class="keyword">if</span>(sumArray[i] &lt; s)
                <span class="keyword">continue</span>;
            j = findLast(i, sumArray, sumArray[i] - s);
            minL = Math.min(i-j, minL);
        }
        <span class="keyword">if</span>(minL == nums.length+<span class="number">1</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">return</span> minL;
    }

    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLast</span><span class="params">(<span class="keyword">int</span> hi, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>{
        <span class="keyword">int</span> mid, lo = <span class="number">0</span>;
        <span class="keyword">while</span>(lo &lt; hi){
            mid = lo + (hi - lo)/<span class="number">2</span>;
            <span class="keyword">if</span>(nums[mid] &gt; target){
                <span class="keyword">if</span>(nums[mid-<span class="number">1</span>] &lt;= target)
                    <span class="keyword">return</span> mid-<span class="number">1</span>;
                hi = mid;
            }<span class="keyword">else</span>{
                <span class="keyword">if</span>(nums[mid+<span class="number">1</span>]&gt;target)
                    <span class="keyword">return</span> mid;
                lo = mid;
            }
        }
        <span class="keyword">return</span> <span class="number">0</span>;
    } 
}
</code></pre>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(NlogN)</p>
<p><strong>Space:</strong> O(N)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[238 product of Array Except Self]]></title>
      <url>/2017/09/05/238-product-of-Array-Except-Self/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/product-of-array-except-self/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>Solve it without division and in O(n).</p>
<p>For example, given [1,2,3,4], return [24,12,8,6].</p>
</blockquote>
<h2 id="Solution-1-Get-total-product"><a href="#Solution-1-Get-total-product" class="headerlink" title="Solution 1 Get total product"></a>Solution 1 Get total product</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span> proj = <span class="number">1</span>;</div><div class="line">        <span class="keyword">boolean</span> hasZero = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)&#123;</div><div class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(hasZero)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">                hasZero = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            proj *= x;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</div><div class="line">                nums[i] = proj;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!hasZero)</div><div class="line">                nums[i] = proj / nums[i];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                nums[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Microsoft </tag>
            
            <tag> Apple </tag>
            
            <tag> LRU Cache </tag>
            
            <tag> Linkedin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[38 Count and Say]]></title>
      <url>/2017/09/04/38-Count-and-Say/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/count-and-say/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>
<pre>1.     1
2.     11
3.     21
4.     1211
5.     111221
</pre>

<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth term of the count-and-say sequence.</p>
<p>Note: Each term of the sequence of integers will be represented as a string.</p>
<p><strong>Example 1:</strong></p>
<pre><b>Input:</b> 1
<b>Output:</b> "1"
</pre>

<p><strong>Example 2:</strong></p>
<pre><b>Input:</b> 4
<b>Output:</b> "1211"
</pre>

</blockquote>
<h2 id="Solution-1-Recursion"><a href="#Solution-1-Recursion" class="headerlink" title="Solution 1 Recursion"></a>Solution 1 Recursion</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">        String lastStr = countAndSay(n-<span class="number">1</span>), thisStr = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span> temp;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(i &lt; lastStr.length())&#123;</div><div class="line">            temp = lastStr.charAt(i);</div><div class="line">            count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i &lt; lastStr.length() &amp;&amp; lastStr.charAt(i) == temp)&#123;</div><div class="line">                count++;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            thisStr=thisStr + count + temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> thisStr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O()</p>
<p><strong>Space:</strong> O()</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[79 Word Search]]></title>
      <url>/2017/09/03/79-Word-Search/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/word-search/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a 2D board and a word, find if the word exists in the grid.</p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>
<p>For example,</p>
<p>Given board =</p>
<pre>[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
</pre>

<p>word = “ABCCED”, -&gt; returns true,</p>
<p>word = “SEE”, -&gt; returns true,</p>
<p>word = “ABCB”, -&gt; returns false.</p>
</blockquote>
<h2 id="Solution-Backtracking"><a href="#Solution-Backtracking" class="headerlink" title="Solution Backtracking"></a>Solution Backtracking</h2><p>Same letter are not allowed to use more than once, so we have to come up a method to record who has been used. In this solution, since char is 8-byte, so we use <strong><em>ch^=256</em></strong> to make it inverse or recover.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(board.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; board.length ; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(backtracking(board, word, <span class="number">0</span>, i, j))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> posw, <span class="keyword">int</span> posx, <span class="keyword">int</span> posy)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(posw == word.length())</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(posx &lt; <span class="number">0</span> || posx &gt;= board.length || posy &lt; <span class="number">0</span> || posy &gt;= board[<span class="number">0</span>].length || board[posx][posy] != word.charAt(posw))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        board[posx][posy] ^= <span class="number">256</span>;</div><div class="line">        <span class="keyword">boolean</span> res = backtracking(board, word, posw+<span class="number">1</span>, posx, posy+<span class="number">1</span>) || backtracking(board, word, posw+<span class="number">1</span>, posx, posy-<span class="number">1</span>) || backtracking(board, word, posw+<span class="number">1</span>, posx+<span class="number">1</span>, posy) || backtracking(board, word, posw+<span class="number">1</span>, posx-<span class="number">1</span>, posy);</div><div class="line">        board[posx][posy] ^=<span class="number">256</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(col^2 * row^2) or exp(wordlen)</p>
<p><strong>Space:</strong> O()</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Bloomberg </tag>
            
            <tag> Backtracking </tag>
            
            <tag> Microsoft </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[43 Multiply Strings]]></title>
      <url>/2017/09/03/43-Multiply-Strings/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/multiply-strings/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.</p>
<p><strong>Note:</strong></p>
<ol>
<li>The length of both num1 and num2 is &lt; 110.</li>
<li>Both num1 and num2 contains only digits 0-9.</li>
<li>Both num1 and num2 does not contain any leading zero.</li>
<li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li>
</ol>
</blockquote>
<h2 id="Solution-1-Use-an-Array-to-store-each-digit"><a href="#Solution-1-Use-an-Array-to-store-each-digit" class="headerlink" title="Solution 1 Use an Array to store each digit"></a>Solution 1 Use an Array to store each digit</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len1 = num1.length(), len2 = num2.length();</div><div class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[len1 + len2 -<span class="number">1</span>];</div><div class="line">        String s = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; j++)&#123;</div><div class="line">                map[i + j] += (num1.charAt(i) - <span class="string">'0'</span>) * (num2.charAt(j)-<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len2 + len1 - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            map[i] += carry;</div><div class="line">            s = (<span class="keyword">char</span>)(map[i]%<span class="number">10</span> + <span class="string">'0'</span>) + s;</div><div class="line">            carry = map[i]/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(s == <span class="string">""</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)</div><div class="line">            s = (<span class="keyword">char</span>)(carry + <span class="string">'0'</span>) + s;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; s.length() &amp;&amp; s.charAt(i) == <span class="string">'0'</span>)&#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i == s.length())</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(N(num1) * N(num2))</p>
<p><strong>Space:</strong>: O(N(num1+num2))</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> String </tag>
            
            <tag> Math </tag>
            
            <tag> Twitter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[49 Group Anagrams]]></title>
      <url>/2017/09/03/49-Group-Anagrams/</url>
      <content type="html"><![CDATA[<h1 id="QUestion"><a href="#QUestion" class="headerlink" title="QUestion"></a><a href="https://leetcode.com/problems/group-anagrams/description/" target="_blank" rel="external">QUestion</a></h1><blockquote>
<p>Given an array of strings, group anagrams together.</p>
<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]</p>
<p>Return:</p>
<pre>[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]</pre>

</blockquote>
<p><strong>Note:</strong> All inputs will be in lower-case.</p>
<h2 id="Solution-1-Sort-String"><a href="#Solution-1-Sort-String" class="headerlink" title="Solution 1 Sort String"></a>Solution 1 Sort String</h2><p>Sort those strs and make them keys of Hash Map</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</div><div class="line">        <span class="keyword">char</span>[] tempArray;</div><div class="line">        String tempStr;</div><div class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">        <span class="keyword">for</span>(String s : strs)&#123;</div><div class="line">            tempArray = s.toCharArray();</div><div class="line">            Arrays.sort(tempArray);</div><div class="line">            tempStr = String.valueOf(tempArray);</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(tempStr))</div><div class="line">                map.put(tempStr, <span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">            map.get(tempStr).add(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;(map.values());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(N(setlen) * N(wordlen)log(N(wordlen)))</p>
<p><strong>Space:</strong>: O(N(setlen) * N(wordlen))</p>
<h2 id="Solution-2-Use-Prime-number-as-key"><a href="#Solution-2-Use-Prime-number-as-key" class="headerlink" title="Solution 2 Use Prime number as key"></a>Solution 2 Use Prime number as key</h2><p>Build an Array of 26 size, elements in it are the first prime number, each word should corresponds to the  same key only if they contain same letters.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">int</span>[] PRIME = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>&#125;;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(String s : strs)&#123;</div><div class="line">            <span class="keyword">int</span> key = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> ch : s.toCharArray())</div><div class="line">                key *= PRIME[ch - <span class="string">'a'</span>];</div><div class="line">            List&lt;String&gt; temp;</div><div class="line">            <span class="keyword">if</span>(map.containsKey(key))&#123;</div><div class="line">                temp = res.get(map.get(key));</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                res.add(temp);</div><div class="line">                map.put(key, res.size()-<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            temp.add(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(N(setlen) * N(wordlen))</p>
<p><strong>Space:</strong>: O(N(setlen) * N(wordlen))</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hash Table </tag>
            
            <tag> Facebook </tag>
            
            <tag> Bloomberg </tag>
            
            <tag> Amazon </tag>
            
            <tag> Uber </tag>
            
            <tag> String </tag>
            
            <tag> Yelp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[337 House Robber III]]></title>
      <url>/2017/09/02/337-House-Robber-III/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>
<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>
<p><strong>Example 1:</strong></p>
<pre>     <font color="red">3</font>
    / \
   2   3
    \   \ 
     <font color="red">3   1</font>
</pre>

<p>Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</p>
<p><strong>Example 2:</strong></p>
<pre>     3
    / \
   <font color="red">4</font>   <font color="red">5</font>
  / \   \ 
 1   3   1
</pre>

<p>Maximum amount of money the thief can rob = 4 + 5 = 9.</p>
</blockquote>
<h2 id="Solution-1-DFS-with-HashMap"><a href="#Solution-1-DFS-with-HashMap" class="headerlink" title="Solution 1  DFS with HashMap"></a>Solution 1  DFS with HashMap</h2><p>Record the information in HashMap to reduce calculation.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> robSum(root, <span class="keyword">new</span> HashMap&lt;TreeNode, Integer&gt;());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">robSum</span><span class="params">(TreeNode root, HashMap&lt;TreeNode, Integer&gt; map)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(root))</div><div class="line">            <span class="keyword">return</span> map.get(root);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> val = root.val;</div><div class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</div><div class="line">            val += robSum(root.left.left, map) +  robSum(root.left.right, map);</div><div class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</div><div class="line">            val += robSum(root.right.left, map) + robSum(root.right.right, map);</div><div class="line">        </div><div class="line">        val = Math.max(val, robSum(root.left, map) + robSum(root.right, map));</div><div class="line">        map.put(root, val);</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(n)</p>
<h2 id="Solution-2-Consider-both-two-Situations"><a href="#Solution-2-Consider-both-two-Situations" class="headerlink" title="Solution 2  Consider both two Situations"></a>Solution 2  Consider both two Situations</h2><p>For each node, we have an Array of size 2, the first element record what is the maxium if we don’t choose this node, the second, on the other hand, means that we choose this node.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] res = robSum(root);</div><div class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] robSum(TreeNode root)&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> [] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span>[] left = robSum(root.left);</div><div class="line">        <span class="keyword">int</span>[] right = robSum(root.right);</div><div class="line">        res[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">1</span>] , right[<span class="number">0</span>]);</div><div class="line">        res[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] +right[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Uber </tag>
            
            <tag> DFS </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[242 Valid Anagram]]></title>
      <url>/2017/09/02/242-Valid-Anagram/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/valid-anagram/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p><strong>Note:</strong></p>
<p>You may assume the string contains only lowercase alphabets.</p>
</blockquote>
<h2 id="Solution-1-Alphabet-Array"><a href="#Solution-1-Alphabet-Array" class="headerlink" title="Solution 1 Alphabet Array"></a>Solution 1 Alphabet Array</h2><p>Since there are only 26 alphabet, we could build an alphabet array and store times eacht alphabet appears.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] alphbet = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch : s.toCharArray())</div><div class="line">            alphbet[ch-<span class="string">'a'</span>]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch : t.toCharArray())</div><div class="line">            alphbet[ch-<span class="string">'a'</span>]--;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : alphbet)</div><div class="line">            <span class="keyword">if</span>(x != <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hash Table </tag>
            
            <tag> Sort </tag>
            
            <tag> Faceboook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[202 Happy Number]]></title>
      <url>/2017/09/02/202-Happy-Number/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/happy-number/discuss/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82</p>
<p>82 + 22 = 68</p>
<p>62 + 82 = 100</p>
<p>12 + 02 + 02 = 1</p>
</blockquote>
<h2 id="Solution-1-Math-Solution"><a href="#Solution-1-Math-Solution" class="headerlink" title="Solution 1 Math Solution"></a>Solution 1 Math Solution</h2><p>It’s just too tricky.</p>
<ol>
<li>Every number will be less than 6 sometiome</li>
<li>Every number became 2-6 are not happy.</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(n &gt; <span class="number">6</span>)&#123;</div><div class="line">            n = generateHappy(n);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">generateHappy</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>( n&gt;<span class="number">0</span> )&#123;</div><div class="line">            sum += (n%<span class="number">10</span>) * (n%<span class="number">10</span>);</div><div class="line">            n/=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(1)</p>
<h2 id="Solution-2-Two-Pointers"><a href="#Solution-2-Two-Pointers" class="headerlink" title="Solution 2 Two Pointers"></a>Solution 2 Two Pointers</h2><p>set <em>fast</em> and <em>slow</em></p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> slow = generateHappy(n);</div><div class="line">        <span class="keyword">int</span> fast = generateHappy(n);</div><div class="line">        fast = generateHappy(fast);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast != slow)&#123;</div><div class="line">            slow = generateHappy(slow);</div><div class="line">            fast = generateHappy(fast);</div><div class="line">            fast = generateHappy(fast);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> slow == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">generateHappy</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>( n&gt;<span class="number">0</span> )&#123;</div><div class="line">            sum += (n%<span class="number">10</span>) * (n%<span class="number">10</span>);</div><div class="line">            n/=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[24 Swap Nodes in Pairs]]></title>
      <url>/2017/09/02/24-Swap-Nodes-in-Pairs/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/swap-nodes-in-pairs/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>
<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
</blockquote>
<h2 id="Solution-1-Swap-Nodes"><a href="#Solution-1-Swap-Nodes" class="headerlink" title="Solution 1 Swap Nodes"></a>Solution 1 Swap Nodes</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode dumpy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), temp, cur;</div><div class="line">        dumpy.next = head;</div><div class="line">        cur = dumpy;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.next != <span class="keyword">null</span>)&#123;</div><div class="line">            temp = cur.next;</div><div class="line">            cur.next = temp.next;</div><div class="line">            temp.next = cur.next.next;</div><div class="line">            cur.next.next = temp;</div><div class="line">            cur = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dumpy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[39 Combination Sum]]></title>
      <url>/2017/09/02/39-Combination-Sum/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/combination-sum/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p>
<p>The same repeated number may be chosen from C unlimited number of times.</p>
<p><strong>Note:</strong></p>
<ul>
<li><p>All numbers (including target) will be positive integers.</p>
</li>
<li><p>The solution set must not contain duplicate combinations.</p>
</li>
</ul>
<p>For example, given candidate set [2, 3, 6, 7] and target 7,<br>A solution set is: </p>
<pre>[
  [7],
  [2, 2, 3]
]
</pre>

</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>Just normal backtracking method. One thing: since it could use same numbers more than one times, the position in next backtracking should be <em>i</em> rather than <em>i+1</em></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        backtracking(res, target, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), candidates, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> target, List&lt;Integer&gt; temp, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(temp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; candidates.length; i++)&#123;</div><div class="line">            temp.add(candidates[i]);</div><div class="line">            backtracking(res, target - candidates[i], temp, candidates, i);</div><div class="line">            temp.remove(temp.size()-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> Hard to calculate, related to the size of nums, those numbers in set and the target number. </p>
<p><strong>Space:</strong>: Same as above, because of use of recursion.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[22 Generate Parentheses]]></title>
      <url>/2017/09/01/22-Generate-Parentheses/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/generate-parentheses/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<p>For example, given n = 3, a solution set is:</p>
<pre>[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
</pre>

</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        backtracking(n, res, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n, List&lt;String&gt; res, String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(right == n)&#123;</div><div class="line">            res.add(s);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(left &lt; n)&#123;</div><div class="line">            backtracking(n, res, s + <span class="string">"("</span>, left+<span class="number">1</span> , right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(right &lt; left)</div><div class="line">            backtracking(n, res, s + <span class="string">")"</span>, left, right +<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> String </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[402  Remove K Digits]]></title>
      <url>/2017/09/01/402-Remove-K-Digits/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/remove-k-digits/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.</p>
<p><strong>Example 1:</strong></p>
<pre>Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
</pre>

<p><strong>Example 2:</strong></p>
<pre>Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
</pre>

<p><strong>Example 3:</strong></p>
<pre>Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
</pre>


</blockquote>
<h2 id="Solution-1-Delete-Larger-One"><a href="#Solution-1-Delete-Larger-One" class="headerlink" title="Solution 1 Delete Larger One"></a>Solution 1 Delete Larger One</h2><p>If current num is smaller than its former, delete the former and continue comparing until k = 0 or i = 0.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeKdigits</span><span class="params">(String num, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = num.length();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; l)&#123;</div><div class="line">            <span class="keyword">while</span>( i &gt;= <span class="number">1</span> &amp;&amp;l&gt;<span class="number">1</span> &amp;&amp; num.charAt(i) &lt; num.charAt(i-<span class="number">1</span>) &amp;&amp; k&gt;<span class="number">0</span>)&#123;</div><div class="line">                num = num.substring(<span class="number">0</span>, i-<span class="number">1</span>) + num.substring(i, l);</div><div class="line">                l--;</div><div class="line">                k--;</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(k == <span class="number">0</span> || l==<span class="number">1</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; l &amp;&amp;  num.charAt(i) == <span class="string">'0'</span>)</div><div class="line">            i++;</div><div class="line">        <span class="keyword">if</span>(i &gt;= l-k)</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        <span class="keyword">return</span> num.substring(i, l-k);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(N),  it seems like o(N^2), but in fact <em>num</em> will get shorter. And every node are visited constant times.</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Greedy </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[231 Power of Two]]></title>
      <url>/2017/09/01/231-Power-of-Two/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an integer, write a function to determine if it is a power of two.</p>
</blockquote>
<h2 id="Solution-1-Math"><a href="#Solution-1-Math" class="headerlink" title="Solution 1 Math"></a>Solution 1 Math</h2><p>normal solution.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            n = n &gt;&gt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)<br><em>__Space:</em> O(1)</p>
<h2 id="Solution-2-Bit-manipulate"><a href="#Solution-2-Bit-manipulate" class="headerlink" title="Solution 2 Bit manipulate"></a>Solution 2 Bit manipulate</h2><p>Bit manipulate solution, very fast.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> (n &amp; (n-<span class="number">1</span>))==<span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(1)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Math </tag>
            
            <tag> Bit Manipulate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[382 Linked List Random Node]]></title>
      <url>/2017/08/31/382-Linked-List-Random-Node/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/linked-list-random-node/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>
<p><strong>Follow up:</strong></p>
<p>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>
<p><strong>Example:</strong></p>
<p><pre>// Init a singly linked list [1,2,3].<br>ListNode head = new ListNode(1);<br>head.next = new ListNode(2);<br>head.next.next = new ListNode(3);<br>Solution solution = new Solution(head);</pre></p>
</blockquote>
<p>// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.<br>solution.getRandom();<br></p>
<h2 id="Solution-1-Use-Reservoir-Sampling"><a href="#Solution-1-Use-Reservoir-Sampling" class="headerlink" title="Solution 1 Use Reservoir Sampling"></a>Solution 1 Use Reservoir Sampling</h2><p>Randomly choose the k-th number as 1/k.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@param</span> head The linked list's head.</span></div><div class="line"><span class="comment">        Note that the head is guaranteed to be not null, so it contains at least one node. */</span></div><div class="line">   </div><div class="line">    ListNode head;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.head = head;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns a random node's value. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</div><div class="line">        ListNode cur = head;</div><div class="line">        <span class="keyword">int</span> res = head.val, i=<span class="number">2</span>;</div><div class="line">        cur = cur.next;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(Math.random() &lt;= <span class="number">1.0</span>/i)</div><div class="line">                res = cur.val;</div><div class="line">            i++;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Reservoir Sampling </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51 Spiral Matrix]]></title>
      <url>/2017/08/31/51-Spiral-Matrix/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/spiral-matrix/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>
<p>For example,<br>Given the following matrix:</p>
<pre>[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
</pre>

</blockquote>
<p>You should return [1,2,3,6,9,8,7,4,5].</p>
<h2 id="Solution-1-Just-go-as-it-said"><a href="#Solution-1-Just-go-as-it-said" class="headerlink" title="Solution 1 Just go as it said"></a>Solution 1 Just go as it said</h2><p>###Code</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> top = <span class="number">0</span>, bottom = matrix.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(bottom &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(i == top)&#123;</div><div class="line">                <span class="keyword">while</span>(j &lt;= right)&#123;</div><div class="line">                    res.add(matrix[i][j]);</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                j--;</div><div class="line">                i++;</div><div class="line">                top++;</div><div class="line">                <span class="keyword">if</span>(top &gt; bottom)</div><div class="line">                    <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j == right )&#123;</div><div class="line">                <span class="keyword">while</span>(i &lt;= bottom)&#123;</div><div class="line">                    res.add(matrix[i][j]);</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                i--;</div><div class="line">                j--;</div><div class="line">                right--;</div><div class="line">                <span class="keyword">if</span>(right&lt;left)</div><div class="line">                    <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(i == bottom)&#123;</div><div class="line">                <span class="keyword">while</span>(j &gt;= left)&#123;</div><div class="line">                    res.add(matrix[i][j]);</div><div class="line">                    j --;</div><div class="line">                &#125;</div><div class="line">                j++;</div><div class="line">                i--;</div><div class="line">                bottom--;</div><div class="line">                <span class="keyword">if</span>(bottom &lt; top)</div><div class="line">                    <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j == left)&#123;</div><div class="line">                <span class="keyword">while</span>(i &gt;= top)&#123;</div><div class="line">                    res.add(matrix[i][j]);</div><div class="line">                    i --;</div><div class="line">                &#125;</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">                left++;</div><div class="line">                <span class="keyword">if</span>(left &gt; right)</div><div class="line">                    <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(N)</p>
<p><strong>Space:</strong> O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[133 Clone Graph]]></title>
      <url>/2017/08/31/133-Clone-Graph/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/clone-graph/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<p>OJ’s undirected graph serialization:<br>Nodes are labeled uniquely.</p>
<p>We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.<br>As an example, consider the serialized graph {0,1,2#1,2#2,2}.</p>
<p>The graph has a total of three nodes, and therefore contains three parts as separated by #.</p>
<ol>
<li>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.</li>
<li>Second node is labeled as 1. Connect node 1 to node 2.</li>
<li>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.</li>
</ol>
<p>Visually, the graph looks like the following:</p>
<pre>       1
      / \
     /   \
    0 --- 2
         / \
         \_/
</pre>

</blockquote>
<h2 id="Solution-1-BFS"><a href="#Solution-1-BFS" class="headerlink" title="Solution 1 BFS"></a>Solution 1 BFS</h2><p>Use BFS, one set to stroe those are already visited, and one map to map the relation between original node to current node.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span><span class="params">(UndirectedGraphNode node)</span> </span>&#123;</div><div class="line">        List&lt;UndirectedGraphNode&gt; q = <span class="keyword">new</span> ArrayList&lt;UndirectedGraphNode&gt;();</div><div class="line">        HashMap&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map = <span class="keyword">new</span> HashMap&lt;UndirectedGraphNode, UndirectedGraphNode&gt;();</div><div class="line">        Set&lt;Integer&gt; visited = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        UndirectedGraphNode res, cur;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        q.add(node);</div><div class="line">        res = <span class="keyword">new</span> UndirectedGraphNode(node.label);</div><div class="line">        cur = res;</div><div class="line">        q.add(cur);</div><div class="line">        <span class="keyword">while</span>(q.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            UndirectedGraphNode x = q.remove(<span class="number">0</span>);</div><div class="line">            cur = q.remove(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span>(visited.contains(x.label))</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            List&lt;UndirectedGraphNode&gt; nei = x.neighbors;</div><div class="line">            map.put(x, cur);</div><div class="line">            visited.add(x.label);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; nei.size(); i++)&#123;</div><div class="line">                <span class="keyword">if</span>(!map.containsKey(nei.get(i)))&#123;</div><div class="line">                    UndirectedGraphNode tempNode = <span class="keyword">new</span> UndirectedGraphNode((nei.get(i).label));</div><div class="line">                    cur.neighbors.add(tempNode);</div><div class="line">                    map.put(nei.get(i), tempNode);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    cur.neighbors.add(map.get(nei.get(i)));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!visited.contains(nei.get(i).label))&#123;</div><div class="line">                    System.out.println(<span class="number">1</span>);</div><div class="line">                    q.add(nei.get(i));</div><div class="line">                    q.add(cur.neighbors.get(i));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(node+edge)</p>
<p><strong>Space:</strong> O(n) for queue, set and map.</p>
<h2 id="Solution-2-DFS"><a href="#Solution-2-DFS" class="headerlink" title="Solution 2 DFS"></a>Solution 2 DFS</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    HashMap&lt;Integer, UndirectedGraphNode&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, UndirectedGraphNode&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span><span class="params">(UndirectedGraphNode node)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clone(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> UndirectedGraphNode <span class="title">clone</span><span class="params">(UndirectedGraphNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(node.label))&#123;</div><div class="line">            <span class="keyword">return</span> map.get(node.label);</div><div class="line">        &#125;</div><div class="line">        UndirectedGraphNode cp = <span class="keyword">new</span> UndirectedGraphNode(node.label);</div><div class="line">        map.put(cp.label, cp);</div><div class="line">        <span class="keyword">for</span>(UndirectedGraphNode n : node.neighbors)&#123;</div><div class="line">            cp.neighbors.add(clone(n));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(node+edge)</p>
<p><strong>Space:</strong> O(node+edge) for recursion.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> Graph </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[236 Lowest Common Ancestor of a Binary Tree]]></title>
      <url>/2017/08/30/236-Lowest-Common-Ancestor-of-a-Binary-Tree/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<pre>        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
</pre>

<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
</blockquote>
<h2 id="Solution-1-Recursion"><a href="#Solution-1-Recursion" class="headerlink" title="Solution 1 Recursion"></a>Solution 1 Recursion</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == p || root == q || root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</div><div class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</div><div class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> right;</div><div class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)</p>
<p><strong>Space:</strong> O(n) for recursion.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[98 Valid Binary Search Tree]]></title>
      <url>/2017/08/30/98-Valid-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>
<p>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p><strong>Example 1:</strong></p>
<pre>    2
   / \
  1   3
</pre>

<p>Binary tree [2,1,3], return true.</p>
<p><strong>Example 2:</strong></p>
<pre>    1
   / \
  2   3
</pre>

<p>Binary tree [1,2,3], return false.</p>
</blockquote>
<h2 id="Solution-1-Morris-Order-Traversal"><a href="#Solution-1-Morris-Order-Traversal" class="headerlink" title="Solution 1 Morris Order Traversal"></a>Solution 1 Morris Order Traversal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        TreeNode cur = root, p;</div><div class="line">        <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> val=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(cur.left == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(first)&#123;</div><div class="line">                    val = cur.val;</div><div class="line">                    first = <span class="keyword">false</span>;</div><div class="line">                    cur = cur.right;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(cur.val &lt;= val)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                val = cur.val;</div><div class="line">                cur = cur.right;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                p = cur.left;</div><div class="line">                <span class="keyword">while</span>(p.right != <span class="keyword">null</span> &amp;&amp; p.right != cur)</div><div class="line">                    p = p.right;</div><div class="line">                <span class="keyword">if</span>(p.right == <span class="keyword">null</span>)&#123;</div><div class="line">                    p.right = cur;</div><div class="line">                    cur = cur.left;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(first)&#123;</div><div class="line">                        val = cur.val;</div><div class="line">                        first = <span class="keyword">false</span>;</div><div class="line">                        p.right = <span class="keyword">null</span>;</div><div class="line">                        cur = cur.right;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(cur.val &lt;= val)</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    val = cur.val;</div><div class="line">                    p.right = <span class="keyword">null</span>;</div><div class="line">                    cur = cur.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> DFS </tag>
            
            <tag> Tree </tag>
            
            <tag> Morris Order </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[125 Valid Palindrome]]></title>
      <url>/2017/08/30/125-Valid-Palindrome/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/valid-palindrome/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
</blockquote>
<h2 id="Solution-1-Two-Pointers"><a href="#Solution-1-Two-Pointers" class="headerlink" title="Solution 1 Two Pointers"></a>Solution 1 Two Pointers</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = s.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt;  j)&#123;</div><div class="line">            <span class="keyword">if</span>(!((s.charAt(i)-<span class="string">'A'</span> &lt;= <span class="number">26</span> &amp;&amp;  s.charAt(i)-<span class="string">'A'</span>&gt;=<span class="number">0</span>) || (s.charAt(i)-<span class="string">'a'</span> &lt;= <span class="number">26</span> &amp;&amp; s.charAt(i)-<span class="string">'a'</span> &gt;= <span class="number">0</span>) ||(s.charAt(i)-<span class="string">'0'</span>&gt;=<span class="number">0</span> &amp;&amp; s.charAt(i)-<span class="string">'0'</span>&lt;=<span class="number">9</span>)))&#123;</div><div class="line">               i++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">              <span class="keyword">if</span>(!((s.charAt(j)-<span class="string">'A'</span> &lt;= <span class="number">26</span> &amp;&amp;  s.charAt(j)-<span class="string">'A'</span>&gt;=<span class="number">0</span>) || (s.charAt(j)-<span class="string">'a'</span> &lt;= <span class="number">26</span> &amp;&amp; s.charAt(j)-<span class="string">'a'</span> &gt;= <span class="number">0</span>) || (s.charAt(j)-<span class="string">'0'</span>&gt;=<span class="number">0</span> &amp;&amp; s.charAt(j)-<span class="string">'0'</span>&lt;=<span class="number">9</span>)))&#123;</div><div class="line">                  j--;</div><div class="line">                  <span class="keyword">continue</span>;</div><div class="line">             &#125;</div><div class="line">            <span class="keyword">char</span> ch1 = s.charAt(i), ch2 = s.charAt(j);</div><div class="line">            <span class="keyword">if</span>(Character.toLowerCase(ch1) != Character.toLowerCase(ch2))</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            i++;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(N)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[78 Subsets]]></title>
      <url>/2017/08/30/78-Subsets/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/subsets/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a set of distinct integers, nums, return all possible subsets.</p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>
<p>For example,<br>If nums = [1,2,3], a solution is:</p>
<pre>[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
</pre>

</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>Select one in the <em>nums</em> and repeat this operation until the last one. Each time chosen the number, turn to the next num and backtracking it, after recursion tracking, remove the last element.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        backtracking(res, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), nums);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> pos, ArrayList&lt;Integer&gt; temp, <span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">        res.add(<span class="keyword">new</span> ArrayList(temp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i&lt;nums.length; i++)&#123;</div><div class="line">            temp.add(nums[i]);</div><div class="line">            backtracking(res, i+<span class="number">1</span>, temp, nums);</div><div class="line">            temp.remove(temp.size()-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(exp(N))</p>
<p><strong>Space:</strong> O(exp(N))</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Backtracking </tag>
            
            <tag> Bit Manipulate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[75 Sort Colors]]></title>
      <url>/2017/08/29/75-Sort-Colors/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/sort-colors/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p><strong>Note:</strong></p>
<p>You are not suppose to use the library’s sort function for this problem.</p>
</blockquote>
<h2 id="Solution-1-Adjust-3-times"><a href="#Solution-1-Adjust-3-times" class="headerlink" title="Solution 1 Adjust 3 times"></a>Solution 1 Adjust 3 times</h2><p>Only 3 values, so this method could work. Adjust 1-2, 0-2 and 0-1 positions.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        adjust(nums, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line">        adjust(nums, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        adjust(nums, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">       <span class="keyword">int</span> i = <span class="number">0</span>, j = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>( i &lt; j )&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(nums[i] == b &amp;&amp; nums[j] == a)&#123;</div><div class="line">                swap(nums, i, j);</div><div class="line">                i++;</div><div class="line">                j--;</div><div class="line">                <span class="keyword">if</span>(i&gt;=j)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(nums[i] != b)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(nums[j] !=a)</div><div class="line">                j--;</div><div class="line"></div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(1)</p>
<p><br><br><br><br><br></p>
<h2 id="Solution-2-sweep-0-and-2"><a href="#Solution-2-sweep-0-and-2" class="headerlink" title="Solution 2 sweep 0 and 2"></a>Solution 2 sweep 0 and 2</h2><p>This idea is to sweep 0 to left and 2 to right.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> second=n-<span class="number">1</span>, zero=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=second; i++) &#123;</div><div class="line">            <span class="keyword">while</span> (A[i]==<span class="number">2</span> &amp;&amp; i&lt;second) swap(A[i], A[second--]);</div><div class="line">            <span class="keyword">while</span> (A[i]==<span class="number">0</span> &amp;&amp; i&gt;zero) swap(A[i], A[zero++]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n), but it scan at most twice.</p>
<p><strong>Space:</strong>: O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[139 Word Break]]></title>
      <url>/2017/08/29/139-Word-Break/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/word-break/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.</p>
<p>For example, given<br>s = “leetcode”,<br>dict = [“leet”, “code”].</p>
<p>Return true because “leetcode” can be segmented as “leet code”.</p>
</blockquote>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><p>Create an array to record if the former n-th letters could be represented, if yes, find according remains.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>{
        <span class="keyword">boolean</span>[] judge = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];
        judge[<span class="number">0</span>] = <span class="keyword">true</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++){
            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; i; j++)
                <span class="keyword">if</span>(judge[j] &amp;&amp; wordDict.contains(s.substring(j, i)))
                    judge[i] = <span class="keyword">true</span>;
        }
        <span class="keyword">return</span> judge[s.length()];
    }
}
</code></pre>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> It is actually O(n^2 * len(dic))</p>
<p><strong>Space:</strong>: O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1 Two Sum]]></title>
      <url>/2017/08/29/1-Two-Sum/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the same element twice.</p>
</blockquote>
<h2 id="Solution-1-Use-HashMap"><a href="#Solution-1-Use-HashMap" class="headerlink" title="Solution 1 Use HashMap"></a>Solution 1 Use HashMap</h2><p>Becareful of replacing keys in Hash map</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(map.containsKey(target - nums[i]))&#123;</div><div class="line">                <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">                res[<span class="number">0</span>] = map.get(target - nums[i]);</div><div class="line">                res[<span class="number">1</span>] = i;</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">            map.put(nums[i], i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n)</p>
<p><strong>Space:</strong>: O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Facebook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[341 Flatten Nested List Iterator]]></title>
      <url>/2017/08/29/341-Flatten-Nested-List-Iterator/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/flatten-nested-list-iterator/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a nested list of integers, implement an iterator to flatten it.</p>
<p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p>
<p><strong>Example 1</strong>:<br>Given the list [[1,1],2,[1,1]],</p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].</p>
<p><strong>Example 2</strong>:<br>Given the list [1,[4,[6]]],</p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].</p>
</blockquote>
<h2 id="Solution-1-Use-Stack"><a href="#Solution-1-Use-Stack" class="headerlink" title="Solution 1 Use Stack"></a>Solution 1 Use Stack</h2><p>Use stack to store data, reverse the order.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    Stack&lt;NestedInteger&gt; s = <span class="keyword">new</span> Stack&lt;NestedInteger&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nestedList.size() -<span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--)&#123;</div><div class="line">            s.push(nestedList.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.pop().getInteger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(s.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(s.peek().isInteger())&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            NestedInteger cur = s.pop();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur.getList().size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">                s.push(cur.getList().get(i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong></p>
<ol>
<li>Initialize: O(n)</li>
<li>hasNext(): O(1)</li>
<li>next(): O(n)</li>
</ol>
<p><strong>Space:</strong>: O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Stack </tag>
            
            <tag> Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[173 Binary Search Tree Iterator]]></title>
      <url>/2017/08/29/173-Binary-Search-Tree-Iterator/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-search-tree-iterator/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>
<p>Calling next() will return the next smallest number in the BST.</p>
<p><strong>Note:</strong> next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</p>
</blockquote>
<h2 id="Solution-1-Use-Stack"><a href="#Solution-1-Use-Stack" class="headerlink" title="Solution 1 Use Stack"></a>Solution 1 Use Stack</h2><p>This is a easy binary tree inorder traversal with stack </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span>&#123;</div><div class="line">    </div><div class="line">    Stack &lt;TreeNode&gt; s = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTIterator</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        TreeNode cur = root;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            s.push(cur);</div><div class="line">            cur = cur.left;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@return</span> whether we have a next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.size()!=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@return</span> the next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        TreeNode  cur = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.hasNext())&#123;</div><div class="line">            cur = s.pop();</div><div class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;</div><div class="line">                TreeNode p = cur.right;</div><div class="line">                <span class="keyword">while</span>(p!= <span class="keyword">null</span>)&#123;</div><div class="line">                    s.push(p);</div><div class="line">                    p = p.left;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cur.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong></p>
<ol>
<li>Initialize: O(h)</li>
<li>hasNext(): O(1)</li>
<li>next(): O(h)</li>
</ol>
<p><strong>Space:</strong>: O(h)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Tree </tag>
            
            <tag> Stack </tag>
            
            <tag> Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[121 Best Time to Buy and Sell Stock]]></title>
      <url>/2017/08/29/121-Best-Time-to-Buy-and-Sell-Stock/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong></p>
<pre>Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
</pre>

<p><strong>Example 2:</strong></p>
<pre>Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
</pre>

</blockquote>
<h2 id="Solution-1-Find-the-Lowest"><a href="#Solution-1-Find-the-Lowest" class="headerlink" title="Solution 1 Find the Lowest"></a>Solution 1 Find the Lowest</h2><p>Dynamic programming requiring recording former information. In this problem, the information is the lowest before current day.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>, profit = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; prices.length; i++)&#123;</div><div class="line">            lo = prices[i] &gt; prices[lo]?lo:i;</div><div class="line">            profit = Math.max(prices[i] - prices[lo], profit);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> profit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong> O(n).</p>
<p><strong>Space:</strong> O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[211 Add and Search Word-Data structure design]]></title>
      <url>/2017/08/28/211-Add-and-Search-Word-Data-structure-design/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Design a data structure that supports the following two operations:</p>
<pre>void addWord(word)
bool search(word)
</pre>

<p>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p>
<p>For example:</p>
<pre>addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -&gt; false
search("bad") -&gt; true
search(".ad") -&gt; true
search("b..") -&gt; true
</pre>

<p><strong>Note:</strong><br>You may assume that all words are consist of lowercase letters a-z.</p>
</blockquote>
<h2 id="Solution-1-Build-a-Tree-Structure"><a href="#Solution-1-Build-a-Tree-Structure" class="headerlink" title="Solution 1 Build a Tree Structure"></a>Solution 1 Build a Tree Structure</h2><p>Build a structure, contains a array of that structure of 26 size and an element to recode a <em>String</em></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">        <span class="keyword">public</span> String item = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TrieNode root = <span class="keyword">new</span> TrieNode();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">        TrieNode node = root;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</div><div class="line">            <span class="keyword">if</span> (node.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) &#123;</div><div class="line">                node.children[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</div><div class="line">            &#125;</div><div class="line">            node = node.children[c - <span class="string">'a'</span>];</div><div class="line">        &#125;</div><div class="line">        node.item = word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> match(word.toCharArray(), <span class="number">0</span>, root);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>[] chs, <span class="keyword">int</span> k, TrieNode node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (k == chs.length) <span class="keyword">return</span> !node.item.equals(<span class="string">""</span>);  </div><div class="line">        <span class="keyword">if</span> (chs[k] != <span class="string">'.'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> node.children[chs[k] - <span class="string">'a'</span>] != <span class="keyword">null</span> &amp;&amp; match(chs, k + <span class="number">1</span>, node.children[chs[k] - <span class="string">'a'</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (node.children[i] != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (match(chs, k + <span class="number">1</span>, node.children[i])) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time: </strong></p>
<ol>
<li>Add: Take at most O(lenOf(word)) time</li>
<li>Search: Take O(sizeOf(set)*lenOf(word)) time</li>
</ol>
<p><strong>Space:</strong> Take O(numberOf(words) * lenOf(word))</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Design </tag>
            
            <tag> Backtracking </tag>
            
            <tag> Tire </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[257 Binary Tree Paths]]></title>
      <url>/2017/08/28/257-Binary-Tree-Paths/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-tree-paths/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, return all root-to-leaf paths.</p>
<p>For example, given the following binary tree:</p>
<pre>   1
 /   \
2     3
 \
  5
</pre>

<p>All root-to-leaf paths are:</p>
<pre>["1-&gt;2-&gt;5", "1-&gt;3"]</pre>

</blockquote>
<h2 id="Solution-1-DFS"><a href="#Solution-1-DFS" class="headerlink" title="Solution 1 DFS"></a>Solution 1 DFS</h2><p>It is easy preorder traversal.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        fillIn(root, <span class="string">""</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillIn</span><span class="params">(TreeNode root, String s, List&lt;String&gt; res)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> )</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</div><div class="line">            s=s+<span class="string">"-&gt;"</span>+root.val;</div><div class="line">            res.add(s.substring(<span class="number">2</span>, s.length()));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        s=s+<span class="string">"-&gt;"</span>+root.val;</div><div class="line">        fillIn(root.left, s, res);</div><div class="line">        fillIn(root.right, s, res);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(NlonN), N times, every time go at most logN deepth.</p>
<p><strong>Space:</strong> O(logN) for recursion’s depth is logN, and every time it cost constant extra space.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> DFS </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[200 Number of Islands]]></title>
      <url>/2017/08/27/200-Number-of-Islands/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/number-of-islands/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p><strong>Example 1:</strong></p>
<pre>11110<br>11010<br>11000<br>00000</pre>

<p>Answer: 1</p>
<p><strong>Example 1:</strong></p>
<pre>11000<br>11000<br>00100<br>00011</pre>

<p>Answer: 3</p>
</blockquote>
<h2 id="Solution-1-Union-Find"><a href="#Solution-1-Union-Find" class="headerlink" title="Solution 1 Union Find"></a>Solution 1 Union Find</h2><p>Utlize Union Find</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> row = grid.length;</div><div class="line">        <span class="keyword">if</span>(row == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        Point[][] map = <span class="keyword">new</span> Point[row][col];</div><div class="line">        </div><div class="line">        <span class="comment">// initialize the map, in which the first means its size if negative.</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</div><div class="line">                map[i][j] = <span class="keyword">new</span> Point(-<span class="number">1</span>, -<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; grid[i-<span class="number">1</span>][j] == <span class="string">'1'</span>)&#123;</div><div class="line">                        combine(map, i, j, i-<span class="number">1</span>, j);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(i &lt; row-<span class="number">1</span> &amp;&amp; grid[i+<span class="number">1</span>][j] == <span class="string">'1'</span>)&#123;</div><div class="line">                        combine(map, i, j, i+<span class="number">1</span>, j);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; grid[i][j-<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</div><div class="line">                        combine(map, i, j, i, j-<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(j &lt; col-<span class="number">1</span> &amp;&amp; grid[i][j+<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</div><div class="line">                        combine(map, i, j, i, j+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(map[i][j].x&lt; <span class="number">0</span> &amp;&amp; grid[i][j] == <span class="string">'1'</span>)</div><div class="line">                    count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(Point[][] map, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tx;</div><div class="line">        <span class="keyword">while</span>(map[x1][y1].x &gt;= <span class="number">0</span>)&#123;</div><div class="line">            System.out.println(x1+<span class="string">"---"</span>+y1);</div><div class="line">            tx = x1;</div><div class="line">            x1 = map[x1][y1].x;</div><div class="line">            y1 = map[tx][y1].y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(map[x2][y2].x &gt;= <span class="number">0</span>)&#123;</div><div class="line">            tx = x2;</div><div class="line">            x2 = map[x2][y2].x;</div><div class="line">            y2 = map[tx][y2].y;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(x1==x2 &amp;&amp; y1==y2) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(map[x1][y1].x &gt; map[x2][y2].x)&#123;</div><div class="line">            map[x2][y2].x += map[x1][y1].x;</div><div class="line">            map[x1][y1].x = x2;</div><div class="line">            map[x1][y1].y = y2;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            map[x1][y1].x += map[x2][y2].x;</div><div class="line">            map[x2][y2].x = x1;</div><div class="line">            map[x2][y2].y = y1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> I sanned the grid and map for constant, so time complexity is O(row*col).</p>
<p><strong>Space:</strong> O(row*col), since I used the map.</p>
<p><br><br><br></p>
<h2 id="Solution-2-DFS"><a href="#Solution-2-DFS" class="headerlink" title="Solution 2 DFS"></a>Solution 2 DFS</h2><p>Once meet ‘1, mark it and its connected ‘1’ all to ‘0’, and count + 1.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> row = grid.length, count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(row == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</div><div class="line">                    DFS(grid, i, j);</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i &gt;= grid.length || i&lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">'0'</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        grid[i][j] = <span class="string">'0'</span>;</div><div class="line">        DFS(grid, i-<span class="number">1</span>, j);</div><div class="line">        DFS(grid, i+<span class="number">1</span>, j);</div><div class="line">        DFS(grid, i, j-<span class="number">1</span>);</div><div class="line">        DFS(grid, i, j+<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> I sanned the grid and map for constant, so time complexity is O(row*col).</p>
<p><strong>Space:</strong> O(row*col), for the worst case of recursion.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> Union Find </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[15 3Sum]]></title>
      <url>/2017/08/27/15-3Sum/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p>
<pre>For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
</pre>

</blockquote>
<h2 id="Solution-1-Two-Pointers"><a href="#Solution-1-Two-Pointers" class="headerlink" title="Solution 1 Two Pointers"></a>Solution 1 Two Pointers</h2><p>To make this “three pointers problem” into a two pointers problem, we have to fix one pointer. when it is fixed it turned in to the 2Sum problem.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">int</span> target, head, tail;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])               </div><div class="line">               <span class="keyword">continue</span>;</div><div class="line">            target = <span class="number">0</span>-nums[i];</div><div class="line">            head = i+<span class="number">1</span>;</div><div class="line">            tail = nums.length -<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(head &lt; tail)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[head] + nums[tail] == target)&#123;</div><div class="line">                    res.add(Arrays.asList(nums[i], nums[head], nums[tail]));</div><div class="line">                    head++;</div><div class="line">                    tail--;</div><div class="line">                    <span class="keyword">while</span>(head &lt; tail &amp;&amp; nums[head-<span class="number">1</span>] == nums[head])</div><div class="line">                        head++;</div><div class="line">                    <span class="keyword">while</span>(tail &gt; head &amp;&amp; nums[tail+<span class="number">1</span>]==nums[tail])</div><div class="line">                        tail--;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[head] + nums[tail] &lt; target)</div><div class="line">                    head++;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    tail--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[91 Decode Ways]]></title>
      <url>/2017/08/27/91-Decode-Ways/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/decode-ways/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
<pre>'A' -&gt; 1
'B' -&gt; 2
...
'Z' -&gt; 26
</pre>

<p>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,</p>
<p>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).</p>
<p>The number of ways decoding “12” is 2.</p>
</blockquote>
<h2 id="Solution-1-Dynamic-Programming"><a href="#Solution-1-Dynamic-Programming" class="headerlink" title="Solution 1 Dynamic Programming"></a>Solution 1 Dynamic Programming</h2><p>This problem could be done step by step.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//Special cases and initialization</span></div><div class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span> || s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count1 = <span class="number">1</span>, count2 =<span class="number">1</span>, temp;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            Each step could be adding the former two steps answer,</span></div><div class="line"><span class="comment">            if 2 digits case is larger than 26, than only same as the former one step</span></div><div class="line"><span class="comment">        */</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++)&#123;</div><div class="line"></div><div class="line">            <span class="comment">// 0 should be carefully treated</span></div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)-<span class="string">'0'</span>&gt;<span class="number">2</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    count1 = count2;</div><div class="line">                    count2 = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span> || (s.charAt(i-<span class="number">1</span>) == <span class="string">'2'</span> &amp;&amp; s.charAt(i)-<span class="string">'0'</span> &lt;= <span class="string">'6'</span>-<span class="string">'0'</span>))&#123;</div><div class="line">                temp = count1;</div><div class="line">                count1 = count1 + count2;</div><div class="line">                count2 = temp;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                count2 = count1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Only one scan, thus itis O(n) time.</p>
<p><strong>Space:</strong> Constant extra space used, space complexity: O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[278 First Bad Version]]></title>
      <url>/2017/08/27/278-First-Bad-Version/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/first-bad-version/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>
</blockquote>
<h2 id="Solution-1-Binary-Search"><a href="#Solution-1-Binary-Search" class="headerlink" title="Solution 1 Binary Search"></a>Solution 1 Binary Search</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(isBadVersion(<span class="number">1</span>))</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> head = <span class="number">1</span>, tail = n, mid;</div><div class="line">        <span class="keyword">while</span>(head+<span class="number">1</span> &lt; tail)&#123;</div><div class="line"></div><div class="line">        <span class="comment">//if use "mid = (head+tail)/2" it will overflow</span></div><div class="line">            mid = (tail - head)/<span class="number">2</span> + head;</div><div class="line">            <span class="keyword">if</span>(isBadVersion(mid))</div><div class="line">                tail = mid;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                head = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tail;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> This question O(log(N))</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[17 Letter Combinations of a Phone Number]]></title>
      <url>/2017/08/27/17-Letter-Combinations-of-a-Phone-Number/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<div class="question-description"><br>        <p></p><p>Given a digit string, return all possible letter combinations that the number could represent.<br></p><br><br><p><br>A mapping of digit to letters (just like on the telephone buttons) is given below.</p><br><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png"></p><br><br><pre><b>Input:</b>Digit string “23”<br><b>Output:</b> [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br></pre><br><br><p><br><b>Note:</b><br><br>Although the above answer is in lexicographical order, your answer could be in any order you want.<br></p><p></p><br>      </div>

</blockquote>
<p><br><br></p>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>Use Backtracking method, add an out word letter by letter</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </div><div class="line">    <span class="comment">// Build a Hash Map for the convenience of searching.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</div><div class="line">            HashMap&lt;Character, String&gt; map = <span class="keyword">new</span> HashMap&lt;Character, String&gt;()&#123;</div><div class="line">            &#123;</div><div class="line">                put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</div><div class="line">                put(<span class="string">'3'</span>, <span class="string">"def"</span>);</div><div class="line">                put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</div><div class="line">                put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</div><div class="line">                put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</div><div class="line">                put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</div><div class="line">                put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</div><div class="line">                put(<span class="string">'9'</span>, <span class="string">"wxyz"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">        <span class="comment">//Special case </span></div><div class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        combine(digits, res, <span class="number">0</span>, <span class="string">""</span>, map);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(String input, List&lt;String&gt; res, <span class="keyword">int</span> pos, String word, HashMap&lt;Character, String&gt; map)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//Regard the word length as return condition</span></div><div class="line">        <span class="keyword">if</span>(word.length() == input.length())&#123;</div><div class="line">            res.add(word);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            1. Choose an input number</span></div><div class="line"><span class="comment">            2. Find its corresponding string</span></div><div class="line"><span class="comment">            3. Add one letter every time and right after that, go to next turn(next input number)</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        */</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; input.length(); i++)&#123;</div><div class="line">            <span class="keyword">char</span> ch = input.charAt(i);</div><div class="line">            String s = map.get(ch);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; s.length(); j++)</div><div class="line">                combine(input, res, i+<span class="number">1</span>, word+s.charAt(j), map);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Each number corresponds to 3 or 4 letters, and time comsuming is multiplied, thus time complexity is O(exp(N)).</p>
<p><strong>Space:</strong> Space is also multiplied for recursion, thus O(exp(N)).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[666 Path Sum IV]]></title>
      <url>/2017/08/26/666-Path-Sum-IV/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-47/problems/path-sum-iv/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>If the depth of a tree is smaller than 5, then this tree can be represented by a list of three-digits integers.</p>
<p>For each integer in this list:</p>
<ol>
<li><p>The hundreds digit represents the depth D of this node, 1 &lt;= D &lt;= 4.</p>
</li>
<li><p>The tens digit represents the position P of this node in the level it belongs to, 1 &lt;= P &lt;= 8. The position is the same as that in a full binary tree.</p>
</li>
<li><p>The units digit represents the value V of this node, 0 &lt;= V &lt;= 9.<br>Given a list of ascending three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.</p>
</li>
</ol>
<p>Given a list of ascending three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.</p>
<p><strong>Example1:</strong></p>
<pre><b>Input:</b> [113, 215, 221]
<b>Output:</b> 12
<b>Explanation:</b> 
The tree that the list represents is:
    3
   / \
  5   1

The path sum is (3 + 5) + (3 + 1) = 12.
</pre>

<p><strong>Examlpe2:</strong></p>
<pre><b>Input:</b> [113, 221]
<b>Output:</b> 4
<b>Explanation:</b> 
The tree that the list represents is: 
    3
     \
      1

The path sum is (3 + 1) = 4.
</pre>

</blockquote>
<p><br><br><br></p>
<h2 id="Solution-1-Add-dumpy-to-null"><a href="#Solution-1-Add-dumpy-to-null" class="headerlink" title="Solution 1 Add dumpy to null"></a>Solution 1 Add dumpy to null</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, p;</div><div class="line">        List&lt;Integer&gt; compTree = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: nums)</div><div class="line">            level=Math.max(level, getDigit(x, <span class="number">3</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= level; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1</span>&lt;&lt;(i-<span class="number">1</span>); j++)&#123;</div><div class="line">                compTree.add(-<span class="number">1</span>*(i*<span class="number">100</span>+j*<span class="number">10</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)&#123;</div><div class="line">            <span class="keyword">int</span> index = (<span class="number">1</span>&lt;&lt;(getDigit(x,<span class="number">3</span>)-<span class="number">1</span>))+getDigit(x,<span class="number">2</span>)-<span class="number">2</span>;</div><div class="line">            compTree.set(index, compTree.get(index)*(-<span class="number">1</span>)+getDigit(x, <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="number">1</span>&lt;&lt;(level))-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            p = i;</div><div class="line">            <span class="keyword">if</span> (compTree.get(p) &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="number">2</span>*p+<span class="number">1</span> &lt; (<span class="number">1</span>&lt;&lt;(level))-<span class="number">2</span> &amp;&amp; (compTree.get(<span class="number">2</span>*p+<span class="number">1</span>) &gt; <span class="number">0</span> || compTree.get(<span class="number">2</span>*p+<span class="number">2</span>) &gt; <span class="number">0</span>))</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">while</span>(p&gt;=<span class="number">0</span>)&#123;</div><div class="line">                System.out.println(p);</div><div class="line">                sum+=getDigit(compTree.get(p), <span class="number">1</span>);</div><div class="line">                p=(p+<span class="number">1</span>)/<span class="number">2</span>-<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDigit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> n%<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> (n/<span class="number">10</span>)%<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)</div><div class="line">            <span class="keyword">return</span> n/<span class="number">100</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Only scan constant times, time complexity: O(n)</p>
<p><strong>Space:</strong> A list is used, space complexity:O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[665 Non-decreasing Array]]></title>
      <url>/2017/08/26/665-Non-decreasing-Array/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-47/problems/non-decreasing-array/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <b>at most</b> <code>1</code> element.</p>
<p>We define an array is non-decreasing if <code>array[i] &lt;= array[i + 1]</code> holds for every <code>i</code> (1 &lt;= i &lt; n).</p>
<p><b>Example 1:</b><br><br></p><pre><b>Input:</b> [4,2,3]<br><b>Output:</b> True<br><b>Explanation:</b> You could modify the first <code>4</code> to <code>1</code> to get a non-decreasing array.<br></pre><br><p></p>

<p><b>Example 2:</b><br><br></p><pre><b>Input:</b> [4,2,1]<br><b>Output:</b> False<br><b>Explanation:</b> You can’t get a non-decreasing array by modify at most one element.<br></pre><br><p></p>

<p><b>Note:</b><br>The <code>n</code> belongs to [1, 10,000].<br></p><p></p>


</blockquote>
<p><br></p>
<h2 id="Solution-1-Online-Solution"><a href="#Solution-1-Online-Solution" class="headerlink" title="Solution 1 Online Solution"></a>Solution 1 Online Solution</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPossibility</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> once = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">if</span>(once)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                once = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(nums[i+<span class="number">1</span>] &gt;= nums[i-<span class="number">1</span>])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; nums.length &amp;&amp; nums[i] &gt;= nums[i+<span class="number">2</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Only scan once, time complexity: O(n)</p>
<p><strong>Space:</strong> Constant extra space is used, space complexity:O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[401 Binary Watch]]></title>
      <url>/2017/08/26/401-Binary-Watch/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-watch/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<div class="question-description"><br>        <p></p><p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p><br><p>Each LED represents a zero or one, with the least significant bit on the right.</p><br><img src="https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg" height="300"><br><p>For example, the above binary watch reads “3:25”.</p><br><br><p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p><br><br><p><b>Example:</b><br></p><pre>Input: n = 1<br>Return: [“1:00”, “2:00”, “4:00”, “8:00”, “0:01”, “0:02”, “0:04”, “0:08”, “0:16”, “0:32”]</pre><br><p></p><br><br><p><b>Note:</b><br><br></p><ul><br><li>The order of output does not matter.</li><br><li>The hour must not contain a leading zero, for example “01:00” is not valid, it should be “1:00”.</li><br><li>The minute must be consist of two digits and may contain a leading zero, for example “10:2” is not valid, it should be “10:02”.</li><br></ul><br><p></p><p></p><br>      </div>

</blockquote>
<h2 id="Solution-1-Backtracking"><a href="#Solution-1-Backtracking" class="headerlink" title="Solution 1 Backtracking"></a>Solution 1 Backtracking</h2><p>Use backtracking technology.</p>
<ol>
<li><p>Regard hour and minute as numbers, find out which numbers could be on the hours an minutes. Build two array representing for each point.</p>
</li>
<li><p><strong>Backtracking</strong>: </p>
<ol>
<li>Find out number of lights represent for hours and minutes accordingly, for example 6 lights could be from 0-6 to 4-2, we call the pair <em>hour-minute-pair</em>;</li>
<li>For each <em>hour-minute-pair</em>, first for hour and then for minutes seprately, each has a initial 0 varible <em>sum</em>: <ol>
<li>According to array order, add one number to <em>sum</em>, then <em>count</em> minus 1.</li>
<li>repet <strong>a.</strong> until <em>count=0</em> ,which means we’ve finished one turn selection, put the sum to list, and continue next turn selection.  </li>
</ol>
</li>
</ol>
</li>
<li><p>Translate numbers to <em>String</em></p>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">int</span> num1[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> num2[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Math.min(<span class="number">4</span>, num); i++)&#123;</div><div class="line">            List&lt;Integer&gt; l1 = getDigit(num1, i);</div><div class="line">            List&lt;Integer&gt; l2 = getDigit(num2, num-i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> h: l1)&#123;</div><div class="line">                <span class="keyword">if</span>(h &gt;= <span class="number">12</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m: l2)&#123;</div><div class="line">                    <span class="keyword">if</span>(m &gt;= <span class="number">60</span>) <span class="keyword">continue</span>;</div><div class="line">                    ans.add(h + <span class="string">":"</span> + ((m &gt;= <span class="number">10</span>)? <span class="string">""</span>:<span class="string">"0"</span>) + m);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans; </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">       <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getDigit</span><span class="params">( <span class="keyword">int</span>[] nums, <span class="keyword">int</span> count)</span></span>&#123;</div><div class="line">            List&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            getDigitHelper(l, nums, count, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> l;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getDigitHelper</span><span class="params">(List&lt;Integer&gt; l, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> count, <span class="keyword">int</span> pos, <span class="keyword">int</span> sum)</span></span>&#123;</div><div class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</div><div class="line">                l.add(sum);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; nums.length; i++)&#123;</div><div class="line">                getDigitHelper(l, nums, count-<span class="number">1</span>, i+<span class="number">1</span>, sum+nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> This question is all limited, thus time complex is O(1)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Backtracking </tag>
            
            <tag> Bit Manipulate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[67 Add Binary]]></title>
      <url>/2017/08/26/67-Add-Binary/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/add-binary/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
</blockquote>
<h2 id="Solution-1-From-tail-to-head"><a href="#Solution-1-From-tail-to-head" class="headerlink" title="Solution 1 From tail to head"></a>Solution 1 From tail to head</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">        String res = <span class="string">""</span>, tempS;</div><div class="line">        <span class="keyword">int</span> i = a.length()-<span class="number">1</span>, j = b.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>, temp;</div><div class="line">        <span class="keyword">while</span>(i &gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</div><div class="line">            temp = a.charAt(i)-<span class="string">'0'</span>+b.charAt(j)-<span class="string">'0'</span>+carry; </div><div class="line">            <span class="keyword">switch</span>(temp)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    res = <span class="string">"0"</span> + res;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    res = <span class="string">"1"</span> + res;</div><div class="line">                    carry =<span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    res = <span class="string">"0"</span> + res;</div><div class="line">                    carry =<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    res = <span class="string">"1"</span> + res;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            j--;</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i == -<span class="number">1</span>)</div><div class="line">            tempS = b.substring(<span class="number">0</span>, j+<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            tempS = a.substring(<span class="number">0</span>, i+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> k = tempS.length()-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(k&gt;=<span class="number">0</span> &amp;&amp; carry==<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(tempS.charAt(k) == <span class="string">'1'</span>)</div><div class="line">                res = <span class="string">"0"</span>+res;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                res = <span class="string">"1"</span> +res;</div><div class="line">                carry =<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            k--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry ==<span class="number">0</span> )</div><div class="line">            <span class="keyword">return</span> tempS.substring(<span class="number">0</span>, k+<span class="number">1</span>)+res;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"1"</span> + res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> String </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20 Valid Parentheses]]></title>
      <url>/2017/08/26/20-Valid-Parentheses/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<h2 id="Solution-1-Use-Stack"><a href="#Solution-1-Use-Stack" class="headerlink" title="Solution 1 Use Stack"></a>Solution 1 Use Stack</h2><p>Use Stack to store left symbol accordingly, if the comming right symbol does not match the top, return false. If left-right count doesn’t match, stack will be empty when right comming or still not empty after the string is all checked</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</div><div class="line">        map.put(<span class="string">')'</span>,<span class="string">'('</span>);</div><div class="line">        map.put(<span class="string">']'</span>,<span class="string">'['</span>);</div><div class="line">        map.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span> || s.charAt(i)== <span class="string">'['</span> || s.charAt(i)==<span class="string">'&#123;'</span>)&#123;</div><div class="line">                stack.push(s.charAt(i));</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span>(stack.pop() != map.get(s.charAt(i)))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(stack.size() &gt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Only scan once, so it’s O(n). </p>
<p><strong>Space:</strong> Also, O(n) for using the stack.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[283 Move Zeros]]></title>
      <url>/2017/08/26/283-Move-Zeros/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0]</p>
<p><strong>Note:</strong></p>
<ol>
<li>You must do this in-place without making a copy of the array.</li>
<li>Minimize the total number of operations.</li>
</ol>
</blockquote>
<h2 id="Solution-1-Two-Pointers"><a href="#Solution-1-Two-Pointers" class="headerlink" title="Solution 1 Two Pointers"></a>Solution 1 Two Pointers</h2><p>One for first zero position, one for curser.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> zeroH = -<span class="number">1</span>, cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(cur =<span class="number">0</span>; cur &lt; nums.length; cur++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[cur] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(zeroH == -<span class="number">1</span>)</div><div class="line">                    zeroH = cur;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(zeroH &gt;= <span class="number">0</span>)&#123;</div><div class="line">                    swap(nums, zeroH, cur);</div><div class="line">                    <span class="keyword">if</span>(zeroH &lt; nums.length-<span class="number">1</span> &amp;&amp; nums[zeroH+<span class="number">1</span>] == <span class="number">0</span>)</div><div class="line">                        zeroH++;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        zeroH = cur;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Only scan once, so it’s O(n). But in this problem, swap operation’s count is important. The operation is O(<em>nonzeros</em>) in worst case.</p>
<p><strong>Space:</strong> O(1)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Facebook </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[617 Merge Two Binary Trees]]></title>
      <url>/2017/08/25/617-Merge-Two-Binary-Trees/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>
<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>
<p><strong>Example 1:</strong></p>
<pre><b>Input:</b> 
    Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
<b>Output:</b> 
Merged tree:
         3
        / \
       4   5
      / \   \ 
     5   4   7
</pre>

<p><strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>
</blockquote>
<h2 id="Solution-1-Recursive-Building"><a href="#Solution-1-Recursive-Building" class="headerlink" title="Solution 1 Recursive Building"></a>Solution 1 Recursive Building</h2><p>First, it is easy to know how to merge two small trees, so divide the question into small pieces. Everytime, merge one node and then, merge its two children.</p>
<font color="red"> <strong>Note:</strong> To makeup unexisting nodes, in order to follow the recirsion pattern, we set <em>null</em> still be <em>null in the next recursion.</em></font>


<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</div><div class="line">        TreeNode t;</div><div class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span> &amp;&amp; t2 ==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        t = <span class="keyword">new</span> TreeNode((t1 == <span class="keyword">null</span>?<span class="number">0</span>:t1.val)+(t2 == <span class="keyword">null</span>? <span class="number">0</span>: t2.val));</div><div class="line">        t.left = mergeTrees(t1==<span class="keyword">null</span>?<span class="keyword">null</span>:t1.left,t2==<span class="keyword">null</span>?<span class="keyword">null</span>:t2.left);</div><div class="line">        t.right = mergeTrees(t1==<span class="keyword">null</span>?<span class="keyword">null</span>:t1.right,t2==<span class="keyword">null</span>?<span class="keyword">null</span>:t2.right);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)</p>
<p><strong>Space:</strong> O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[606 Construct String from Binary Tree]]></title>
      <url>/2017/08/25/606-Construct-String-from-Binary-Tree/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/construct-string-from-binary-tree/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>
<p>The null node needs to be represented by empty parenthesis pair “()”. And you need to omit all the empty parenthesis pairs that don’t affect the one-to-one mapping relationship between the string and the original binary tree.</p>
<p><strong>Example 1:</strong></p>
<pre><b>Input:</b> Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

<b>Output:</b> "1(2(4))(3)"
<br><b>Explanation:</b> Originallay it needs to be "1(2(4)())(3()())", <br>but you need to omit all the unnecessary empty parenthesis pairs. <br>And it will be "1(2(4))(3)".
</pre>

<p><strong>Example2:</strong></p>
<pre><b>Input:</b> Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

<b>Output:</b> "1(2()(4))(3)"
<br><b>Explanation:</b> Almost the same as the first example, <br>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.
</pre>

</blockquote>
<h2 id="Solution-1-Recursive-Solution"><a href="#Solution-1-Recursive-Solution" class="headerlink" title="Solution 1 Recursive Solution"></a>Solution 1 Recursive Solution</h2><p>Easy to understand.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tree2str</span><span class="params">(TreeNode t)</span> </span>&#123;</div><div class="line">        String s=<span class="string">""</span>;</div><div class="line">        <span class="keyword">return</span> T2S(t);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">T2S</span><span class="params">(TreeNode t)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(t.left == <span class="keyword">null</span> &amp;&amp; t.right == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> t.val+<span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(t.left == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> t.val +<span class="string">"()"</span>+<span class="string">"("</span>+ T2S(t.right) +<span class="string">")"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">if</span>(t.right == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> t.val + <span class="string">"("</span>+ T2S(t.left) +<span class="string">")"</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> t.val + <span class="string">"("</span>+ T2S(t.left) +<span class="string">")"</span>+<span class="string">"("</span>+ T2S(t.right) +<span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)</p>
<p><strong>Space:</strong> O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[572 Subtree of Another Tree]]></title>
      <url>/2017/08/25/572-Subtree-of-Another-Tree/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/find-bottom-left-tree-value/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.</p>
<p>Example 1:</p>
<p>Given tree s:</p>
<pre>     3
    / \
   4   5
  / \
 1   2
</pre>

<p>Given tree t:</p>
<pre>   4 
  / \
 1   2
</pre>

<p>Return <strong>true</strong>, because t has the same structure and node values with a subtree of s.</p>
<p><strong>Example2:</strong><br>Given tree s:</p>
<pre>     3
    / \
   4   5
  / \
 1   2
    /
   0
</pre>


<p>Given tree t:</p>
<pre>   4
  / \
 1   2
</pre>

<p>Return <strong>false</strong>.</p>
</blockquote>
<h2 id="Solution-1-Recursive-Find-and-Recursive-Compare"><a href="#Solution-1-Recursive-Find-and-Recursive-Compare" class="headerlink" title="Solution 1 Recursive Find and Recursive Compare"></a>Solution 1 Recursive Find and Recursive Compare</h2><p>Since this problem is signed as <em>Easy</em>, I did not think much and use normal solutions.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; store = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        findSameRoot(s, t.val, store);</div><div class="line">        <span class="keyword">for</span>(TreeNode x: store)&#123;</div><div class="line">            <span class="keyword">if</span>(sameTree(x, t))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">sameTree</span><span class="params">(TreeNode x, TreeNode t)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(x == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>((x == <span class="keyword">null</span> &amp;&amp; t !=<span class="keyword">null</span>) || (x != <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> (x.val == t.val) &amp;&amp; (sameTree(x.left, t.left)) &amp;&amp; (sameTree(x.right, t.right));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findSameRoot</span><span class="params">(TreeNode s, <span class="keyword">int</span> v, List&lt;TreeNode&gt; store)</span></span>&#123;</div><div class="line">            <span class="keyword">if</span>(s == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span>(s.val == v)</div><div class="line">                store.add(s);</div><div class="line">            findSameRoot(s.left, v, store);</div><div class="line">            findSameRoot(s.right, v, store); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Time complexity is large, it is O( n(s)*n(t) ) in the worst case, but I think in most case, there is not much same root,  maybe one or two, so generally it is O(n(s)+n(t)).</p>
<p><strong>Space:</strong> Recursion is used, thus as calculated it should be O(n(s)).</p>
<p><br><br><br></p>
<h2 id="Solution-2-MorrisInorder"><a href="#Solution-2-MorrisInorder" class="headerlink" title="Solution 2 MorrisInorder"></a>Solution 2 MorrisInorder</h2><p>This is a beautiful solution to test morrisInorder.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> morrisInorder(s).contains(morrisInorder(t));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">morrisInorder</span><span class="params">(TreeNode t)</span></span>&#123;</div><div class="line">        String str = <span class="string">""</span>;</div><div class="line">        TreeNode cur = t, temp;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(cur.left == <span class="keyword">null</span>)&#123;</div><div class="line">                str+=<span class="string">"l"</span>;</div><div class="line">                str+=cur.val;</div><div class="line">                cur = cur.right;</div><div class="line">                <span class="keyword">if</span>(cur == <span class="keyword">null</span>)&#123;</div><div class="line">                    System.out.println(str+<span class="string">"r"</span>);</div><div class="line">                    <span class="keyword">return</span> str+<span class="string">"r"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                temp=cur.left;</div><div class="line">                <span class="keyword">while</span>(temp.right != <span class="keyword">null</span> &amp;&amp; temp.right !=cur)</div><div class="line">                    temp = temp.right;</div><div class="line">                <span class="keyword">if</span>(temp.right == <span class="keyword">null</span>)&#123;</div><div class="line">                    temp.right = cur;</div><div class="line">                    cur = cur.left;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    str+=<span class="string">"r"</span>;</div><div class="line">                    str+=cur.val;</div><div class="line">                    temp.right = <span class="keyword">null</span>;</div><div class="line">                    cur = cur.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(str+<span class="string">"r"</span>);</div><div class="line">        <span class="keyword">return</span> str+<span class="string">"r"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n)<br><strong>Space:</strong> O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[513 Find Bottom Left Tree Value]]></title>
      <url>/2017/08/25/513-Find-Bottom-Left-Tree-Value/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/find-bottom-left-tree-value/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, find the leftmost value in the last row of the tree.</p>
<p><strong>Example1:</strong></p>
</blockquote>
<pre>Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
</pre>

<blockquote>
<p><strong>Note:</strong> You may assume the tree (i.e., the given root node) is not <strong>NULL</strong>.</p>
</blockquote>
<h2 id="Solution-1-BFS-Levelorder"><a href="#Solution-1-BFS-Levelorder" class="headerlink" title="Solution 1 BFS-Levelorder"></a>Solution 1 BFS-Levelorder</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; q = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        TreeNode p;</div><div class="line">        <span class="keyword">int</span> len;</div><div class="line">        </div><div class="line">        q.add(root);</div><div class="line">        <span class="keyword">while</span>(q.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            len = q.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">                p = q.remove(<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(p.left != <span class="keyword">null</span>)</div><div class="line">                    q.add(p.left);</div><div class="line">                <span class="keyword">if</span>(p.right != <span class="keyword">null</span>)</div><div class="line">                    q.add(p.right);</div><div class="line">                temp.add(p.val);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(q.size()&gt;<span class="number">0</span>)</div><div class="line">                temp.clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp.get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Every node is visited once, so the time complexity is O(n).</p>
<p><strong>Space:</strong> One Stack is used to store at most half of the elements, thus, the space complexity is also O(n).</p>
<p><br><br><br></p>
<h2 id="Solution-2-DFS-Solution-Preorder"><a href="#Solution-2-DFS-Solution-Preorder" class="headerlink" title="Solution 2 DFS Solution-Preorder"></a>Solution 2 DFS Solution-Preorder</h2><p>This method does not requires stack or queue, first go as left as it can, record its <strong>maxLevel</strong>. Than go right step by step, once the level is more than <strong>maxLevel</strong> turn the <strong>res</strong> to that value.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLevel = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        dfs(root, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        dfs(root.left, level+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(level &gt; maxLevel)&#123;</div><div class="line">            maxLevel = level;</div><div class="line">            res = root.val;</div><div class="line">        &#125;</div><div class="line">        dfs(root.right, level+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Every node is visited once, so the time complexity is O(n).</p>
<p><strong>Space:</strong> Though it does not use apparent extra data structure, it uses recursions in the <strong>dfs</strong> function, thus its space complexity is also O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[563 Binary Tree Tilt]]></title>
      <url>/2017/08/25/563-Binary-Tree-Tilt/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-tree-tilt/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, return the tilt of the <strong>whole tree</strong>.</p>
<p>The tilt of a <strong>tree node</strong> is defined as the <strong>absolute difference</strong> between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.</p>
<p>The tilt of the <strong>whole tree</strong> is defined as the sum of all nodes’ tilt.</p>
<p><strong>Example:</strong></p>
<pre><b>Input:</b> 
         1
       /   \
      2     3
<b>Output:</b> 1
<b>Explanation:</b> 
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-3| = 1
Tilt of binary tree : 0 + 0 + 1 = 1
</pre>

<p><strong>Note:</strong></p>
<ol>
<li>The sum of node values in any subtree won’t exceed the range of 32-bit integer.</li>
<li>All the tilt values won’t exceed the range of 32-bit integer.</li>
</ol>
</blockquote>
<h2 id="Solution-1-Brute-Force-–-Recusion-in-Recusion"><a href="#Solution-1-Brute-Force-–-Recusion-in-Recusion" class="headerlink" title="Solution 1 Brute Force – Recusion in Recusion"></a>Solution 1 Brute Force – Recusion in Recusion</h2><p>It is the easiest way for a coder to come up with a recusion solution, but I have to addmit that it is hard for the computer. So, mostly, I’d rather think much longer to come up with a iterative way. This time, however, I can’t find one, and even put a recusion into a recusion. Though the solution is accepted, I am still not satisfied.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTilt</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span>  getTilt(root);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getTilt</span><span class="params">(TreeNode t)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        sum += Math.abs(getSum(t.left)-getSum(t.right));</div><div class="line">        <span class="keyword">return</span> sum + getTilt(t.left) + getTilt(t.right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(TreeNode t)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> sum + getSum(t.left)+getSum(t.right)+t.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> As I calculated, the <strong>getSum()</strong> function has time complexity of O(n), and <strong>getTilt()</strong>‘s is O(nlogn).</p>
<p><strong>Space:</strong> As calculated, both functions’ space complexities are O(n).</p>
<p><br><br><br></p>
<h2 id="Solution-2-Use-Global-Varible"><a href="#Solution-2-Use-Global-Varible" class="headerlink" title="Solution 2 Use Global Varible"></a>Solution 2 Use Global Varible</h2><p>As I see the <em>leetcode’s</em> official solution, there is only a method with a class-global varible, I thought it was not allowed.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tilt=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTilt</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        traverse(root);</div><div class="line">        <span class="keyword">return</span> tilt;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span> )</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=traverse(root.left);</div><div class="line">        <span class="keyword">int</span> right=traverse(root.right);</div><div class="line">        tilt+=Math.abs(left-right);</div><div class="line">        <span class="keyword">return</span> left+right+root.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> In this case, the time complexity is O(n).</p>
<p><strong>Space:</strong> As calculated the space complexity is also O(n).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[144 Binary Tree Preorder Traversal]]></title>
      <url>/2017/08/24/144-Binary-Tree-Preorder-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<p>For example:</p>
<p>Given binary tree {1, #, 2, 3},</p>
<pre>   1
   \
    2
   /
  3
</pre>

<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively?</p>
</blockquote>
<h2 id="Solution-1-Morris-Order-Traverse"><a href="#Solution-1-Morris-Order-Traverse" class="headerlink" title="Solution 1 Morris Order Traverse"></a>Solution 1 Morris Order Traverse</h2><p>As I see this problem, I thought I need a <em>Stack</em> or <em>Queue</em> or something like that. But I was wrong. After I knew this solution, I was so surprised that I decided to consider this method of traversing every time I meet <em>Tree</em> problem. </p>
<p>Let me explain, to make inorder with using only constant space and linear time, we need only follow these principles:</p>
<ul>
<li><p>When <em>left child</em> is null, visit the <em>current node</em> and set current node as itd <em>right child</em>.</p>
</li>
<li><p>Other wise, find the <em>pre-node</em> of <em>current node</em>:</p>
<ul>
<li>if the <em>pre-node</em>‘s <em>right child</em> is null, then <font color="red"> visit <em>current node</em> </font> set its <em>right child</em> as current node and set current child as its <em>left child</em></li>
<li>otherwise, the <em>pre-node</em>‘s <em>right child</em> must be <em>current node</em>, and set <em>pre-node</em>‘s _right child as null to reset the original tree. Then set <em>current node</em> as its <em>right child</em>.</li>
</ul>
</li>
</ul>
<p><strong>Q:</strong> How to find ones <em>pre-node</em>?</p>
<p><strong>A:</strong> In its left <em>subtree</em>, find the mose right node.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        morrisOrder(ans, root);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">morrisOrder</span><span class="params">(List&lt;Integer&gt; li, TreeNode t)</span></span>&#123;</div><div class="line">        TreeNode p;</div><div class="line">        <span class="keyword">while</span>(t != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(t.left == <span class="keyword">null</span>)&#123;</div><div class="line">                li.add(t.val);</div><div class="line">                t=t.right;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                p = t.left;</div><div class="line">                <span class="keyword">while</span>(p.right != t &amp;&amp; p.right != <span class="keyword">null</span>)</div><div class="line">                    p = p.right;</div><div class="line">                <span class="keyword">if</span>(p.right == <span class="keyword">null</span>)&#123;</div><div class="line">                    p.right = t;</div><div class="line">                    li.add(t.val);</div><div class="line">                    t = t.left;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    p.right = <span class="keyword">null</span>; </div><div class="line">                    t = t.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> As analysed, every node would be visted at most twice, thus time complexity is O(n);</p>
<p><strong>Space:</strong> This is where it’s excellent, we did not use any other space that is proportion to node numbers, nor do we used recursion, thus extra space complexity is O(1);</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
            <tag> Morris Order </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[94 Binary Tree Inorder Traversal]]></title>
      <url>/2017/08/24/94-Binary-Tree-Inorder-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:</p>
<p>Given binary tree [1,null,2,3],</p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively?</p>
</blockquote>
<h2 id="Solution-1-Morris-Order-Traverse"><a href="#Solution-1-Morris-Order-Traverse" class="headerlink" title="Solution 1 Morris Order Traverse"></a>Solution 1 Morris Order Traverse</h2><p>As I see this problem, I thought I need a <em>Stack</em> or <em>Queue</em> or something like that. But I was wrong. After I knew this solution, I was so surprised that I decided to consider this method of traversing every time I meet <em>Tree</em> problem. </p>
<p>Let me explain, to make inorder with using only constant space and linear time, we need only follow these principles:</p>
<ul>
<li><p>When <em>left child</em> is null, visit the <em>current node</em> and set current node as itd <em>right child</em>.</p>
</li>
<li><p>Other wise, find the <em>pre-node</em> of <em>current node</em>:</p>
<ul>
<li>if the <em>pre-node</em>‘s <em>right child</em> is null, then set its <em>right child</em> as current node and set current child as its <em>left child</em></li>
<li>otherwise, the <em>pre-node</em>‘s <em>right child</em> must be <em>current node</em>, visit <em>current node</em> and set <em>pre-node</em>‘s _right child as null to reset the original tree. Then set <em>current node</em> as its <em>right child</em>.</li>
</ul>
</li>
</ul>
<p><strong>Q:</strong> How to find ones <em>pre-node</em>?</p>
<p><strong>A:</strong> In its left <em>subtree</em>, find the mose right node.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        morrisOrder(ans, root);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">morrisOrder</span><span class="params">(List&lt;Integer&gt; li, TreeNode t)</span></span>&#123;</div><div class="line">        TreeNode p;</div><div class="line">        <span class="keyword">while</span>(t != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(t.left == <span class="keyword">null</span>)&#123;</div><div class="line">                li.add(t.val);</div><div class="line">                t=t.right;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                p = t.left;</div><div class="line">                <span class="keyword">while</span>(p.right != t &amp;&amp; p.right != <span class="keyword">null</span>)</div><div class="line">                    p = p.right;</div><div class="line">                <span class="keyword">if</span>(p.right == <span class="keyword">null</span>)&#123;</div><div class="line">                    p.right = t;</div><div class="line">                    t = t.left;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    p.right = <span class="keyword">null</span>;</div><div class="line">                    li.add(t.val);</div><div class="line">                    t = t.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> As analysed, every node would be visted at most twice, thus time complexity is O(n);</p>
<p><strong>Space:</strong> This is where it’s excellent, we did not use any other space that is proportion to node numbers, nor do we used recursion, thus extra space complexity is O(1);</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
            <tag> Morris Order </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[455 Add Two Numbers II]]></title>
      <url>/2017/08/24/455-Add-Two-Numbers-II/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/add-two-numbers-ii/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Follow up</strong>:</p>
<p>What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</p>
<p><strong>Example:</strong></p>
<p><strong>Input:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>Output:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7</p>
</blockquote>
<h2 id="Solution-1-Use-Stack"><a href="#Solution-1-Use-Stack" class="headerlink" title="Solution 1 Use Stack"></a>Solution 1 Use Stack</h2><p>Use Stack to save time, but lose space.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</div><div class="line">        ListNode dumpy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode cur1 = l1, cur2 = l2, cur = dumpy;</div><div class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">        Stack&lt;ListNode&gt; s = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</div><div class="line">            </div><div class="line">        <span class="keyword">while</span>(cur1 != <span class="keyword">null</span>)&#123;</div><div class="line">            len1++;</div><div class="line">            cur1 = cur1.next;    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(cur2 != <span class="keyword">null</span>)&#123;</div><div class="line">            len2++;</div><div class="line">            cur2 = cur2.next;    </div><div class="line">        &#125;</div><div class="line">        cur1 = l1;</div><div class="line">        cur2 = l2;</div><div class="line">        </div><div class="line">        s.push(dumpy);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(len1 &gt;= len2)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; len1-len2; i++)&#123;</div><div class="line">                cur.next = <span class="keyword">new</span> ListNode(cur1.val);</div><div class="line">                cur1 = cur1.next;</div><div class="line">                cur = cur.next;</div><div class="line">                s.push(cur);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; len2-len1; i++)&#123;</div><div class="line">                    cur.next = <span class="keyword">new</span> ListNode(cur2.val);</div><div class="line">                    cur2 = cur2.next;</div><div class="line">                    cur = cur.next;</div><div class="line">                    s.push(cur);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(cur1 != <span class="keyword">null</span>)&#123;</div><div class="line">            cur.next = <span class="keyword">new</span> ListNode(cur1.val + cur2.val);</div><div class="line">            s.push(cur.next);</div><div class="line">            cur1 = cur1.next;</div><div class="line">            cur2 = cur2.next;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(s.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(s.peek().val+c&gt;=<span class="number">10</span>)&#123;</div><div class="line">                s.pop().val+=c-<span class="number">10</span>;</div><div class="line">                c=<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                s.pop().val+=c;</div><div class="line">                c=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(dumpy.val == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> dumpy.next;</div><div class="line">        <span class="keyword">return</span> dumpy;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> I sanned the list and <em>Stack</em> for constant, so time complexity is O(n).</p>
<p><strong>Space:</strong> Obviously, O(n), since I used the Stack.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[328 Odd Even Linked List]]></title>
      <url>/2017/08/24/328-Odd-Even-Linked-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/odd-even-linked-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>
<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>
<p><strong>Example:</strong></p>
<p>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL,</p>
<p>return 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL.</p>
<p><strong>Note:</strong></p>
<p>The relative order inside both the even and odd groups should remain as it was in the input. </p>
<p>The first node is considered odd, the second node even and so on …</p>
</blockquote>
<h2 id="Solution-1-Pointers-Tracking"><a href="#Solution-1-Pointers-Tracking" class="headerlink" title="Solution 1 Pointers Tracking"></a>Solution 1 Pointers Tracking</h2><p>I use three pointers to track the list, and add to the tail according.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode headOdd = <span class="keyword">new</span> ListNode(<span class="number">0</span>), headEven = <span class="keyword">new</span> ListNode(<span class="number">0</span>), curOdd = headOdd, curEven = headEven, cur=<span class="keyword">new</span> ListNode(<span class="number">0</span>), dumpy = cur;</div><div class="line">        </div><div class="line">        cur.next = head;</div><div class="line">        <span class="keyword">boolean</span> isOdd = <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            isOdd = !isOdd;</div><div class="line">            cur = cur.next;</div><div class="line">            <span class="keyword">if</span>(isOdd)&#123;</div><div class="line">                curOdd.next = cur;</div><div class="line">                curOdd = curOdd.next;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                curEven.next = cur;</div><div class="line">                curEven = curEven.next; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cur = dumpy;</div><div class="line">        curEven = headEven.next;</div><div class="line">        curOdd = headOdd.next;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(curOdd != <span class="keyword">null</span>)&#123;</div><div class="line">            cur.next = curOdd;</div><div class="line">            cur = cur.next;</div><div class="line">            curOdd = curOdd.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(curEven != <span class="keyword">null</span>)&#123;</div><div class="line">            cur.next = curEven;</div><div class="line">            cur = cur.next;</div><div class="line">            curEven = curEven.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dumpy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> I sanned the list for constant, so time complexity is O(n).</p>
<p><strong>Space:</strong> Obviously, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[237 Delete Node in a Linked List]]></title>
      <url>/2017/08/24/237-Delete-Node-in-a-Linked-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
</blockquote>
<h2 id="Solution-1-Easy-Solution"><a href="#Solution-1-Easy-Solution" class="headerlink" title="Solution 1 Easy Solution"></a>Solution 1 Easy Solution</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</div><div class="line">        node.val = node.next.val;</div><div class="line">        node.next = node.next.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Obviously, O(1).</p>
<p><strong>Space:</strong> Obviously, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[234 Palindrome Linked List]]></title>
      <url>/2017/08/24/234-Palindrome-Linked-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/palindrome-linked-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a singly linked list, determine if it is a palindrome.</p>
</blockquote>
<h2 id="Solution-1-Reverse-Half"><a href="#Solution-1-Reverse-Half" class="headerlink" title="Solution 1 Reverse Half"></a>Solution 1 Reverse Half</h2><p>I reversed the latter half, and compare.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode fast = head, slow = head;</div><div class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</div><div class="line">            slow = slow.next;</div><div class="line">            fast = fast.next.next;</div><div class="line">        &#125;</div><div class="line">        slow=reverseList(slow);</div><div class="line">        fast = head;</div><div class="line">        <span class="keyword">while</span>(slow != <span class="keyword">null</span> &amp;&amp; fast !=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(slow.val != fast.val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            slow = slow.next;</div><div class="line">            fast =fast.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode p)</span></span>&#123;</div><div class="line">        ListNode last = <span class="keyword">null</span>, cur = p, temp;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            temp = cur.next;</div><div class="line">            cur.next = last;</div><div class="line">            last = cur;</div><div class="line">            cur = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Obviously, O(n).</p>
<p><strong>Space:</strong> Obviously, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Two Pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[206 Reverse Linked List]]></title>
      <url>/2017/08/24/206-Reverse-Linked-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/reverse-linked-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Reverse a singly linked list.</p>
</blockquote>
<h2 id="Solution-1-Easy-solution"><a href="#Solution-1-Easy-solution" class="headerlink" title="Solution 1 Easy solution"></a>Solution 1 Easy solution</h2><p>Too easy to explain.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode cur = head, last=<span class="keyword">null</span>, temp;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            temp = cur.next;</div><div class="line">            cur.next = last;</div><div class="line">            last = cur;</div><div class="line">            cur = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Obviously, O(n).</p>
<p><strong>Space:</strong> Obviously, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[203 Removed Linked List Elements]]></title>
      <url>/2017/08/24/203-Removed-Linked-List-Elements/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/remove-linked-list-elements/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Remove all elements from a linked list of integers that have value <strong><em>val</em></strong>.</p>
<p><strong>Example</strong></p>
<p><strong><em>Given:</em></strong> 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6</p>
<p><strong><em>Return:</em></strong> 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>
</blockquote>
<h2 id="Solution-1-Easy-Problem-Easy-Solution"><a href="#Solution-1-Easy-Problem-Easy-Solution" class="headerlink" title="Solution 1 Easy Problem, Easy Solution"></a>Solution 1 Easy Problem, Easy Solution</h2><p>No explanation.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        ListNode dumpy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        dumpy.next = head;</div><div class="line">        ListNode p = dumpy;</div><div class="line">        ListNode q;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; p.next != <span class="keyword">null</span>)&#123;</div><div class="line">            q = p;</div><div class="line">            <span class="keyword">while</span>(p.next!=<span class="keyword">null</span> &amp;&amp; p.next.val == val)</div><div class="line">                p=p.next;</div><div class="line">            q.next=p.next;</div><div class="line">            p=p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dumpy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Obviously, O(n).</p>
<p><strong>Space:</strong> Obviously, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[160 Intersection of Two Linked Lists]]></title>
      <url>/2017/08/24/160-Intersection-of-Two-Linked-Lists/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<pre>

   A:          a1 → a2
                       ↘
                         c1 → c2 → c3
                       ↗            
    B:     b1 → b2 → b3
</pre>

<p>begin to intersect at node c1.</p>
<p><strong>Notes:</strong></p>
<ul>
<li>If the two linked lists have no intersection at all, return null.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
</blockquote>
<h2 id="Solution-1-Fast-and-Slow-Pointers"><a href="#Solution-1-Fast-and-Slow-Pointers" class="headerlink" title="Solution 1 Fast and Slow Pointers"></a>Solution 1 Fast and Slow Pointers</h2><p>Since we could change the structure in the process, we can make it a circle and usc <strong>fast and slow pointers</strong> to solve the problem. </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</div><div class="line">        ListNode fast = headB, slow = headB, p = headA;</div><div class="line">        <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>(p.next != <span class="keyword">null</span>)</div><div class="line">            p=p.next;</div><div class="line">        p.next = headA;</div><div class="line">        slow = slow.next;</div><div class="line">        <span class="keyword">if</span>(slow == <span class="keyword">null</span>)&#123;</div><div class="line">            p.next = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        fast = slow.next;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span> &amp;&amp; fast != slow)&#123;</div><div class="line">            fast = fast.next.next;</div><div class="line">            slow = slow.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</div><div class="line">            p.next =<span class="keyword">null</span>;   </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        slow =headB;</div><div class="line">        <span class="keyword">while</span>(fast != slow)&#123;</div><div class="line">            fast = fast.next;</div><div class="line">            slow =slow.next;</div><div class="line">        &#125;</div><div class="line">        p.next = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> fast;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> It only envolve sanning the circle constant times, thus time complexity is O(n).</p>
<p><strong>Space:</strong> Constant extra Space is used, thus, O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Two Pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[148 Sort List]]></title>
      <url>/2017/08/24/148-Sort-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/sort-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Sort a linked list in O(n log n) time using constant space complexity.</p>
</blockquote>
<h2 id="Solution-1-Bottom-to-Top"><a href="#Solution-1-Bottom-to-Top" class="headerlink" title="Solution 1 Bottom to Top"></a>Solution 1 Bottom to Top</h2><p>Since we could only use O(1) extra space, recursive method will not be acceptable. Thus, there is a <strong>Bottom-to-Top</strong> solution.</p>
<p>Its idea is same as <strong>merge sort</strong>, just it’s not recursive, it is not easy to explain in detail, but the code is below. We need to be careful of boundary problems.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">        ListNode left, right, tail, cur;</div><div class="line">        ListNode dumy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        dumy.next = head;</div><div class="line">        cur = dumy.next;</div><div class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">            length++;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; length; step&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">            cur = dumy.next;</div><div class="line">            tail = dumy;</div><div class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</div><div class="line">                left = cur;</div><div class="line">                right = seperate(left, step);</div><div class="line">                cur = seperate(right, step);</div><div class="line">                tail = merge(left, right, tail);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dumy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// seperate the list from the "step" point</span></div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">seperate</span><span class="params">(ListNode head, <span class="keyword">int</span> step)</span></span>&#123;</div><div class="line">        ListNode p;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; head != <span class="keyword">null</span> &amp;&amp; i &lt; step; i++)</div><div class="line">            head = head.next;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        p = head.next;</div><div class="line">        head.next = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// merge two list, add to the "head" and return its tail</span></div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2, ListNode head)</span></span>&#123;</div><div class="line">        ListNode p = head;</div><div class="line">        <span class="keyword">while</span>( l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span> )&#123;</div><div class="line">            <span class="keyword">if</span>(l1.val &lt;= l2.val)&#123;</div><div class="line">                p.next = l1;</div><div class="line">                l1 = l1.next;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                p.next = l2;</div><div class="line">                l2 = l2.next;</div><div class="line">            &#125;</div><div class="line">            p = p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</div><div class="line">            p.next = l2;</div><div class="line">            <span class="keyword">while</span>(l2.next != <span class="keyword">null</span>)</div><div class="line">                l2 = l2.next;</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            p.next = l1;</div><div class="line">            <span class="keyword">while</span>(l1.next != <span class="keyword">null</span>)</div><div class="line">                l1 = l1.next;</div><div class="line">            <span class="keyword">return</span> l1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Obviously, as the problem required, it’s O(nlogn).</p>
<p><strong>Space:</strong> It’s O(1) for not using recursion.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[143 Reorder List]]></title>
      <url>/2017/08/24/143-Reorder-List/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/reorder-list/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a singly linked list L: L<sub>0</sub>?L<sub>1</sub>?…?L<sub>n-1</sub>?L<sub>n</sub>,</p>
<p>reorder it to: L<sub>0</sub>?L<sub>n</sub>?L<sub>1</sub>?L<sub>n-1</sub>?L<sub>2</sub>?<sub>Ln-2</sub>?…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,</p>
<p>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
</blockquote>
<h2 id="Solution-1-Seperate-Reverse-and-Merge"><a href="#Solution-1-Seperate-Reverse-and-Merge" class="headerlink" title="Solution 1 Seperate, Reverse and Merge"></a>Solution 1 Seperate, Reverse and Merge</h2><p>This solution might seem complicated, but it is in fact fast and require only constant extra space.</p>
<p>First, <strong>SEPERATE</strong> the list into two parts at its middle point. If its length is odd, then the former one should be longer.</p>
<p>Second, <strong>REVERSE</strong> the latter part using the function <em>reverseList</em>.</p>
<p>Finally, <strong>MERGE</strong> the two lists again, and we fot the correct answer. </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * public class ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, i;</div><div class="line">        ListNode p = head, temp1, temp2, q=p, t;</div><div class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</div><div class="line">            l += <span class="number">1</span>;</div><div class="line">            p = p.next;</div><div class="line">        &#125;</div><div class="line">        p=head;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (l-<span class="number">1</span>)/<span class="number">2</span>; i++)</div><div class="line">            q=q.next;</div><div class="line">        </div><div class="line">        t=q;</div><div class="line">        q.next=reverseList(q.next);</div><div class="line">        q=q.next;</div><div class="line">        t.next=<span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= (l-<span class="number">1</span>)/<span class="number">2</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(q == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            temp1 = p.next;</div><div class="line">            p.next = q;</div><div class="line">            temp2 = q.next;</div><div class="line">            q.next =temp1;</div><div class="line">            p = temp1;</div><div class="line">            q = temp2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">( ListNode p)</span></span>&#123;</div><div class="line">        ListNode head;</div><div class="line">        head = p;</div><div class="line">        ListNode temp = <span class="keyword">null</span>, q;</div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</div><div class="line">            head = p;</div><div class="line">            q = p.next;</div><div class="line">            p.next = temp;</div><div class="line">            temp = p;</div><div class="line">            p=q;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> As I said, it is fast enough, since it is only evolved with some scanning operation, thus the time complexity is O(n).</p>
<p><strong>Space:</strong> Space Complexity is obviously O(1), since only constant extra space is used.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[138 Copy List with Random Pointer]]></title>
      <url>/2017/08/23/138-Copy-List-with-Random-Pointer/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/copy-list-with-random-pointer/description/" target="_blank" rel="external">Question</a></h1><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a deep copy of the list.</p>
<h2 id="Solution-1-Hasp-Map"><a href="#Solution-1-Hasp-Map" class="headerlink" title="Solution 1 Hasp-Map"></a>Solution 1 Hasp-Map</h2><p>We have to copy the whole list and random pointers, thus we first copy the <em>next line</em>, meanwhile, push the <strong>original</strong> : <strong>new</strong>  to haspmap, for convenience of copying the <em>random</em> line.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list with a random pointer.</span></div><div class="line"><span class="comment"> * class RandomListNode &#123;</span></div><div class="line"><span class="comment"> *     int label;</span></div><div class="line"><span class="comment"> *     RandomListNode next, random;</span></div><div class="line"><span class="comment"> *     RandomListNode(int x) &#123; this.label = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span><span class="params">(RandomListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        HashMap&lt;RandomListNode, RandomListNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        RandomListNode res = <span class="keyword">new</span> RandomListNode(<span class="number">0</span>);</div><div class="line">        RandomListNode p = res;</div><div class="line">        RandomListNode q = head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span>)&#123;</div><div class="line">            p.next = <span class="keyword">new</span> RandomListNode(q.label);</div><div class="line">            map.put(q, p.next);</div><div class="line">            q=q.next;</div><div class="line">            p=p.next;</div><div class="line">        &#125;</div><div class="line">        map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        p=res.next;</div><div class="line">        q=head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span>)&#123;</div><div class="line">            p.random=map.get(q.random);</div><div class="line">            p=p.next;</div><div class="line">            q=q.next;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Hashing inserting and querying operation is so fast that it could be considered as O(1), in this case, since we scanned the linked list two times, time complexity should be O(n).</p>
<p><strong>Space:</strong> Considering extra space, it is obvious O(n), to build the hash map.</p>
<h2 id="Solution-2-Without-Hash"><a href="#Solution-2-Without-Hash" class="headerlink" title="Solution 2 Without Hash"></a>Solution 2 Without Hash</h2><p>This method is not accepted, because it has to change the original linked list’s <em>next</em> attribution, but it only cost O(1) Space!</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span><span class="params">(RandomListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        RandomListNode p = head;</div><div class="line">        RandomListNode res = <span class="keyword">new</span> RandomListNode(<span class="number">0</span>);</div><div class="line">        RandomListNode q = res;</div><div class="line">        RandomListNode temp;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</div><div class="line">            q.next = <span class="keyword">new</span> RandomListNode(p.label);</div><div class="line">            q.next.random = p.random;</div><div class="line">            temp = p;</div><div class="line">            p=p.next;</div><div class="line">            temp.next = q.next;</div><div class="line">            q=q.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        q = res.next;</div><div class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(q.random != <span class="keyword">null</span>)</div><div class="line">                q.random = q.random.next;</div><div class="line">            q=q.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Same as above, O(n).</p>
<p><strong>Space:</strong>Only Constant extra space used, so it’s O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hash Table </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[661 Image Smoother]]></title>
      <url>/2017/08/23/661-Image-Smoother/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/image-smoother/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.</p>
<p><strong>example:</strong></p>
<p><strong>Input:</strong><br>[[1,1,1],<br> [1,0,1],<br> [1,1,1]]</p>
<p><strong>Output:</strong><br>[[0, 0, 0],<br> [0, 0, 0],<br> [0, 0, 0]]</p>
<p><strong>Explanation:</strong></p>
<p>For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0</p>
<p>For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0</p>
<p>For the point (1,1): floor(8/9) = floor(0.88888889) = 0</p>
</blockquote>
<h2 id="Solution-1-Temp-Array-to-Save-Space"><a href="#Solution-1-Temp-Array-to-Save-Space" class="headerlink" title="Solution 1 Temp Array to Save Space"></a>Solution 1 Temp Array to Save Space</h2><p>As I see the problem, I know that time complexity will not be less than O(row * col). Thus, I try to find a way to save space, which shold have been O(row * col), too. </p>
<p>In this solution, I used two temp arraies, <em>temp1</em> and <em>temp2</em>, see the code below.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre><code class="java">
<span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="keyword">public</span> <span class="keyword">int</span>[][] imageSmoother(<span class="keyword">int</span>[][] M) {
        <span class="keyword">int</span> row = M.length, col = M[<span class="number">0</span>].length;
        <span class="keyword">int</span>[] temp1 = <span class="keyword">new</span> <span class="keyword">int</span>[row];
        <span class="keyword">int</span>[] temp2 = <span class="keyword">new</span> <span class="keyword">int</span>[row];

        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++){
            temp1[i] = findAve(M, i, <span class="number">0</span>);
        }

        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++){
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)
                temp2[i] = findAve(M, i, j);
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++){
                M[i][j-<span class="number">1</span>]=temp1[i];
                temp1[i] = temp2[i];
            }
        }
        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)
            M[i][col-<span class="number">1</span>] = temp1[i];
        <span class="keyword">return</span> M;
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAve</span><span class="params">(<span class="keyword">int</span> [][] M, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{
        <span class="keyword">int</span> sum = <span class="number">0</span>, num = <span class="number">9</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> a = i-<span class="number">1</span>; a &lt;= i+<span class="number">1</span>; a++){
            <span class="keyword">for</span>(<span class="keyword">int</span> b = j-<span class="number">1</span>; b&lt;=j+<span class="number">1</span>; b++){
                <span class="keyword">if</span>((a&lt;<span class="number">0</span> || a&gt; M.length-<span class="number">1</span>) || (b&lt;<span class="number">0</span> || b&gt;M[<span class="number">0</span>].length-<span class="number">1</span>)){
                    num--;
                }<span class="keyword">else</span>{
                    sum+=M[a][b];
                }
            }
        }
        <span class="keyword">return</span> sum/num;
    }

}
</code></pre>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> The time complexity should not be lesser, it’s O(row * col).</p>
<p><strong>Space:</strong> Only constant extra space is used, except the two temp array, thus space complexity is O(row), whic could be turned to O(min(row, col)) by choosing the fewer one, but the code will be much longer.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Space Saving </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[643 Maxium Average Subarray I]]></title>
      <url>/2017/08/23/643-Maxium-Average-Subarray-I/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/maximum-average-subarray-i/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p>
<p><strong>example:</strong></p>
<p><strong>Input:</strong> [1,12,-5,-6,50,3], k = 4</p>
<p><strong>Output:</strong> 12.75</p>
<p><strong>Explanation:</strong> Maximum average is (12-5-6+50)/4 = 51/4 = 12.75</p>
</blockquote>
<h2 id="Solution-1-Cumulative-Array"><a href="#Solution-1-Cumulative-Array" class="headerlink" title="Solution 1 Cumulative Array"></a>Solution 1 Cumulative Array</h2><p>Since it’s a contiguous array comparasion, we can first find the sum array, then deduce accordingly to easily find those sums.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++ )&#123;</div><div class="line">            nums[i]+=nums[i-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max = nums[k-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-k; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i+k] - nums[i] &gt; max)</div><div class="line">                max = nums[i+k] - nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)max/k;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong>  Only O(n) because we scanned the array two times.</p>
<p><strong>Space:</strong> O(1), if we use the orginal array to store the <strong>cumulative array</strong>.<br>Otherwise, it should be O(n).</p>
<h2 id="Solution-2-Window-Scan"><a href="#Solution-2-Window-Scan" class="headerlink" title="Solution 2 Window Scan"></a>Solution 2 Window Scan</h2><p>If we know one continous sum, we can easily find out the next by adding the next number and deducting the head number.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> maxS = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            maxS+=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> current = maxS;</div><div class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = k-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(tail &lt; nums.length-<span class="number">1</span>)&#123;</div><div class="line">            current = current+nums[tail+<span class="number">1</span>]-nums[head];</div><div class="line">            maxS = Math.max(maxS, current);</div><div class="line">            head++;</div><div class="line">            tail++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)maxS/k;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Since only scan once, the time complexity is o(n).</p>
<p><strong>Space:</strong> Constant extra space is used, thus space complexity is O(1).</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[628 Maximum Product of Three Numbers]]></title>
      <url>/2017/08/22/628-Maximum-Product-of-Three-Numbers/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/task-scheduler/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p>
<p><strong>Example:</strong></p>
<p><strong>Input:</strong> [1,2,3]<br><strong>Output:</strong> 6</p>
</blockquote>
<h2 id="Solution-1-Sort"><a href="#Solution-1-Sort" class="headerlink" title="Solution 1 Sort"></a>Solution 1 Sort</h2><p>There are only 3 possible largest comnination, 2 smallest negative + 1 largest positive, or 3 largest positive, or 3 smallest negative. Thus, sorting first, then it is a very straightforward problem.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> l = nums.length;</div><div class="line">        <span class="keyword">int</span> a = nums[<span class="number">0</span>], b = nums[<span class="number">1</span>], c= nums[<span class="number">2</span>],</div><div class="line">            d = nums[l-<span class="number">1</span>], e = nums[l-<span class="number">2</span>], f = nums[l-<span class="number">3</span>];</div><div class="line">        <span class="keyword">return</span> Math.max(a*b*c, Math.max(a*b*d, d*e*f));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Since there is only one <strong>sort</strong> operation and some constant time operations, its time complexity is O(nlogn), where n represents the length of the array.</p>
<p><strong>Space:</strong> Space complexity is obviously O(nlogn), since only <strong>sorting</strong> cost extra space.</p>
<p><hr></p>
<h5 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h5><p>Since we only have to find those 5 numbers, we can at most scan the array one time to get them, in this way, we get an O(n) time and O(1) Extra Space solution.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[621 Task Scheduler]]></title>
      <url>/2017/08/22/621-Task-Scheduler/</url>
      <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><a href="https://leetcode.com/problems/task-scheduler/description/" target="_blank" rel="external">Question</a></h1><blockquote>
<p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>
<p>However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.</p>
<p>You need to return the least number of intervals the CPU will take to finish all the given tasks.</p>
<p><strong>example:</strong></p>
<p><strong>Input</strong> : tasks = [‘A’,’A’,’A’,’B’,’B’,’B’], n = 2</p>
<p><strong>Output</strong> : 8</p>
<p><strong>Explanation</strong> : A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.</p>
</blockquote>
<h2 id="Solution-1-Max-Heap"><a href="#Solution-1-Max-Heap" class="headerlink" title="Solution 1 Max-Heap"></a>Solution 1 Max-Heap</h2><p>Since what a charcter is does not affect the result, we only have to ocnsider their counts. Following is an intutional solution, we arrange the largest first, which is to be verify. But it works. So we need a max-heap – a fast way to find the largest.</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Store the number of each charaters in a <strong>Max-Heap</strong></p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Loop. One loop contains n steps, each step remove one current largest, if it is still not totally removed, add it to a <strong>temp</strong> ArrayList. If the <strong>queue</strong> is empty before n steps, then add<br>idle time interval accordingly. Afterwards, put all elements in the <strong>temp</strong> array to the <strong>queue</strong> again.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="keyword">char</span>[] tasks, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> tasks.length;</div><div class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">        <span class="keyword">int</span> time = <span class="number">0</span>, i=<span class="number">0</span>;</div><div class="line">        PriorityQueue &lt; Integer &gt; queue = <span class="keyword">new</span> PriorityQueue &lt; Integer &gt; (<span class="number">26</span>, Collections.reverseOrder());</div><div class="line">        <span class="keyword">int</span> intervals=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : tasks)</div><div class="line">            map[(<span class="keyword">int</span>)(c-<span class="string">'A'</span>)]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : map)&#123;</div><div class="line">            <span class="keyword">if</span>(x &gt; <span class="number">0</span>)</div><div class="line">                queue.add(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(queue.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            i=<span class="number">0</span>;</div><div class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="keyword">while</span>(i &lt;= n)&#123;</div><div class="line">                <span class="keyword">if</span>(queue.peek()&gt;<span class="number">1</span>)</div><div class="line">                    temp.add(queue.poll()-<span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    queue.poll();</div><div class="line">                time++;</div><div class="line">                i++;</div><div class="line">                <span class="keyword">if</span>(queue.size()==<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(temp.size()!=<span class="number">0</span>)&#123;</div><div class="line">                        time+=n-i+<span class="number">1</span>;</div><div class="line">                        <span class="keyword">break</span>;   </div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">return</span> time;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x: temp)</div><div class="line">                queue.add(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> time;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis"><a href="#T-amp-S-Analysis" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> Since the size of queue is limited under 26, time complexity only depend on <strong>n</strong> linearly, thus, time complexity is O(n).</p>
<p><strong>Space:</strong> Space complexity is obviously O(1), because there are at most 26 kinds of characters.</p>
<h2 id="Solution-2-Counting-Idle-Time"><a href="#Solution-2-Counting-Idle-Time" class="headerlink" title="Solution 2 Counting Idle Time"></a>Solution 2 Counting Idle Time</h2><p>This method first count the minium idle time, then calculate out the result.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="keyword">char</span>[] tasks, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: tasks)</div><div class="line">            map[c - <span class="string">'A'</span>]++;</div><div class="line">        Arrays.sort(map);</div><div class="line">        <span class="keyword">int</span> max_val = map[<span class="number">25</span>] - <span class="number">1</span>, idle_slots = max_val * n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">24</span>; i &gt;= <span class="number">0</span> &amp;&amp; map[i] &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            idle_slots -= Math.min(map[i], max_val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> idle_slots &gt; <span class="number">0</span> ? idle_slots + tasks.length : tasks.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="T-amp-S-Analysis-1"><a href="#T-amp-S-Analysis-1" class="headerlink" title="T&amp;S Analysis"></a>T&amp;S Analysis</h3><p><strong>Time:</strong> O(n). It is obvious.</p>
<p><strong>Spaece:</strong> O(1). Also obvious.</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Greedy </tag>
            
            <tag> Queue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[My Blog Starts Here]]></title>
      <url>/2017/08/22/New-Article/</url>
      <content type="html"><![CDATA[<p>Hi, this is a blog about coding, recoding my learning journey from 2017 summer.</p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> general </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
